/* Generated by Cython 0.22.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Program Files (x86)\\OptiTrack\\Motive\\inc\\NPTrackingTools.h"
        ], 
        "extra_link_args": [
            "/DEFAULTLIB:NPTrackingTools"
        ], 
        "include_dirs": [
            "C:\\Program Files (x86)\\OptiTrack\\Motive\\inc", 
            "src"
        ], 
        "language": "c++", 
        "library_dirs": [
            "C:\\Program Files (x86)\\OptiTrack\\Motive\\lib"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22_1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__native
#define __PYX_HAVE_API__native
#include "NPTrackingTools.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src\\native.pyx",
  "src\\cnative.pxd",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'native' */
#define __Pyx_MODULE_NAME "native"
int __pyx_module_is_main_native = 0;

/* Implementation of 'native' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_pf_6native_initialize(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_2shutdown(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_4load_calibration(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_calib_filename); /* proto */
static PyObject *__pyx_pf_6native_6load_rigid_bodies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_load_bodies_file); /* proto */
static PyObject *__pyx_pf_6native_8save_rigid_bodies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rigid_filename); /* proto */
static PyObject *__pyx_pf_6native_10add_rigid_bodies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rigid_bodies_file); /* proto */
static PyObject *__pyx_pf_6native_12load_project(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_project_file); /* proto */
static PyObject *__pyx_pf_6native_14save_project(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_project_file); /* proto */
static PyObject *__pyx_pf_6native_16load_calibration_from_memory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buffername, int __pyx_v_buffersize); /* proto */
static PyObject *__pyx_pf_6native_18update(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_20update_single_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_22stream_trackd(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_6native_24stream_vrpn(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled, int __pyx_v_port); /* proto */
static PyObject *__pyx_pf_6native_26stream_np(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_6native_28frame_marker_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_30frame_marker_x(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_32frame_marker_y(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_34frame_marker_z(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_36frame_marker_list(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_38frame_time_stamp(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_40frame_camera_centroid(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, int __pyx_v_cameraIndex, float __pyx_v_x, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_6native_42flush_camera_queues(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_44set_rigid_body_user_data(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, int __pyx_v_ID); /* proto */
static PyObject *__pyx_pf_6native_46rigid_body_user_data(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_48rigid_body_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_50set_rigid_body_enabled(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, bool __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_6native_52rigid_body_enabled(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_54is_rigid_body_tracked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_56rigid_body_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z, float __pyx_v_qx, float __pyx_v_qy, float __pyx_v_qz, float __pyx_v_qw, float __pyx_v_yaw, float __pyx_v_pitch, float __pyx_v_roll); /* proto */
static PyObject *__pyx_pf_6native_58rigid_body_translate_pivot(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z); /* proto */
static PyObject *__pyx_pf_6native_60rigid_body_reset_orientation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_62clear_rigid_body_list(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_64remove_rigid_body(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_66rigid_body_marker_count(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_68rigid_body_marker(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_rigidIndex, int __pyx_v_markerIndex, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z); /* proto */
static PyObject *__pyx_pf_6native_70rigid_body_point_cloud_marker(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_rigidIndex, int __pyx_v_markerIndex, bool __pyx_v_tracked, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z); /* proto */
static PyObject *__pyx_pf_6native_72create_rigid_body(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, int __pyx_v_id, int __pyx_v_markerCount, PyObject *__pyx_v_markerList); /* proto */
static PyObject *__pyx_pf_6native_74software_build(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_76camera_group_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_78create_camera_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_80remove_camera_group(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_82cameras_group(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_84set_group_shutter_delay(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_groupIndex, int __pyx_v_microseconds); /* proto */
static PyObject *__pyx_pf_6native_86set_camera_group(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_cameraGroupIndex); /* proto */
static PyObject *__pyx_pf_6native_88set_camera_group_reconstruction(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_groupIndex, bool __pyx_v_enable); /* proto */
static PyObject *__pyx_pf_6native_90set_enabled_filterswitch(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_6native_92is_filter_switch_enabled(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_94camera_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6native_96camera_x_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_98camera_y_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_100camera_z_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_102camera_orientation_matrix(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_camera, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_104camera_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6native_106camera_marker_count(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_108camera_marker(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_markerIndex, float __pyx_v_x, float __pyx_v_y); /* proto */
static PyObject *__pyx_pf_6native_110camera_pixel_resolution(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_width, int __pyx_v_height); /* proto */
static PyObject *__pyx_pf_6native_112set_camera_settings(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_camindex, int __pyx_v_videotype, int __pyx_v_exposure, int __pyx_v_threshold, int __pyx_v_intensity); /* proto */
static PyObject *__pyx_pf_6native_114set_camera_frame_rate(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_frameRate); /* proto */
static PyObject *__pyx_pf_6native_116camera_frame_rate(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_118camera_exposure(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_120camera_threshold(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_122camera_intensity(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_124camera_temperature(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_126camera_ring_light_temperature(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_128camera_grayscale_decimation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_130set_camera_grayscale_decimation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6native_132set_camera_filter_switch(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableIRFilter); /* proto */
static PyObject *__pyx_pf_6native_134set_camera_agc(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableAutomaticGainControl); /* proto */
static PyObject *__pyx_pf_6native_136set_camera_aec(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableAutomaticExposureControl); /* proto */
static PyObject *__pyx_pf_6native_138set_camera_high_power(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableHighPowerMode); /* proto */
static PyObject *__pyx_pf_6native_140set_camera_mjpeg_high_quality(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_mjpegQuality); /* proto */
static PyObject *__pyx_pf_6native_142camera_imager_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_144camera_imager_gain_levels(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_146set_camera_imager_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6native_148is_continuous_ir_available(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_150continuous_ir(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_152set_continous_ir(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enable); /* proto */
static PyObject *__pyx_pf_6native_154camera_mask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, PyObject *__pyx_v_buffername, int __pyx_v_bufferSize); /* proto */
static PyObject *__pyx_pf_6native_156set_camera_mask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, PyObject *__pyx_v_buffername, int __pyx_v_bufferSize); /* proto */
static PyObject *__pyx_pf_6native_158clear_camera_mask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex); /* proto */
static PyObject *__pyx_pf_6native_160camera_mask_info(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_blockingMaskWidth, int __pyx_v_blockingMaskHeight, int __pyx_v_blockingMaskGrid); /* proto */
static char __pyx_k_i[] = "i";
static char __pyx_k_s[] = "%s";
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_z[] = "z";
static char __pyx_k_ID[] = "ID";
static char __pyx_k_No[] = "No";
static char __pyx_k_On[] = "On";
static char __pyx_k_id[] = "id";
static char __pyx_k_qw[] = "qw";
static char __pyx_k_qx[] = "qx";
static char __pyx_k_qy[] = "qy";
static char __pyx_k_qz[] = "qz";
static char __pyx_k_Off[] = "Off";
static char __pyx_k_Set[] = "Set";
static char __pyx_k_Yes[] = "Yes";
static char __pyx_k_end[] = "end";
static char __pyx_k_yaw[] = "yaw";
static char __pyx_k_True[] = "True";
static char __pyx_k_Vash[] = "Vash";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_port[] = "port";
static char __pyx_k_roll[] = "roll";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_Error[] = "Error";
static char __pyx_k_False[] = "False";
static char __pyx_k_index[] = "index";
static char __pyx_k_pitch[] = "pitch";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_value[] = "value";
static char __pyx_k_width[] = "width";
static char __pyx_k_author[] = "__author__";
static char __pyx_k_buffer[] = "buffer";
static char __pyx_k_camera[] = "camera";
static char __pyx_k_enable[] = "enable";
static char __pyx_k_height[] = "height";
static char __pyx_k_native[] = "native";
static char __pyx_k_update[] = "update";
static char __pyx_k_Cleared[] = "Cleared";
static char __pyx_k_Flushed[] = "Flushed";
static char __pyx_k_Removed[] = "Removed";
static char __pyx_k_enabled[] = "enabled";
static char __pyx_k_tracked[] = "tracked";
static char __pyx_k_camindex[] = "camindex";
static char __pyx_k_exposure[] = "exposure";
static char __pyx_k_shutdown[] = "shutdown";
static char __pyx_k_frameRate[] = "frameRate";
static char __pyx_k_intensity[] = "intensity";
static char __pyx_k_stream_np[] = "stream_np";
static char __pyx_k_threshold[] = "threshold";
static char __pyx_k_videotype[] = "videotype";
static char __pyx_k_bufferSize[] = "bufferSize";
static char __pyx_k_buffername[] = "buffername";
static char __pyx_k_buffersize[] = "buffersize";
static char __pyx_k_groupIndex[] = "groupIndex";
static char __pyx_k_initialize[] = "initialize";
static char __pyx_k_markerList[] = "markerList";
static char __pyx_k_rigidIndex[] = "rigidIndex";
static char __pyx_k_Mask_exists[] = "Mask exists";
static char __pyx_k_Not_cleared[] = "Not cleared";
static char __pyx_k_cameraIndex[] = "cameraIndex";
static char __pyx_k_camera_mask[] = "camera_mask";
static char __pyx_k_camera_name[] = "camera_name";
static char __pyx_k_markerCount[] = "markerCount";
static char __pyx_k_markerIndex[] = "markerIndex";
static char __pyx_k_markerListp[] = "markerListp";
static char __pyx_k_marker_list[] = "marker_list";
static char __pyx_k_stream_vrpn[] = "stream_vrpn";
static char __pyx_k_camera_count[] = "camera_count";
static char __pyx_k_load_project[] = "load_project";
static char __pyx_k_microseconds[] = "microseconds";
static char __pyx_k_mjpegQuality[] = "mjpegQuality";
static char __pyx_k_project_file[] = "project_file";
static char __pyx_k_save_project[] = "save_project";
static char __pyx_k_Error_Not_set[] = "Error. Not set";
static char __pyx_k_camera_marker[] = "camera_marker";
static char __pyx_k_cameras_group[] = "cameras_group";
static char __pyx_k_continuous_ir[] = "continuous_ir";
static char __pyx_k_stream_trackd[] = "stream_trackd";
static char __pyx_k_calib_filename[] = "calib_filename";
static char __pyx_k_enableIRFilter[] = "enableIRFilter";
static char __pyx_k_frame_marker_x[] = "frame_marker_x";
static char __pyx_k_frame_marker_y[] = "frame_marker_y";
static char __pyx_k_frame_marker_z[] = "frame_marker_z";
static char __pyx_k_rigid_filename[] = "rigid_filename";
static char __pyx_k_set_camera_aec[] = "set_camera_aec";
static char __pyx_k_set_camera_agc[] = "set_camera_agc";
static char __pyx_k_software_build[] = "software_build";
static char __pyx_k_Rigid_body_ID_i[] = "Rigid body ID: %i";
static char __pyx_k_camera_exposure[] = "camera_exposure";
static char __pyx_k_rigid_body_name[] = "rigid_body_name";
static char __pyx_k_set_camera_mask[] = "set_camera_mask";
static char __pyx_k_add_rigid_bodies[] = "add_rigid_bodies";
static char __pyx_k_blockingMaskGrid[] = "blockingMaskGrid";
static char __pyx_k_cameraGroupIndex[] = "cameraGroupIndex";
static char __pyx_k_camera_intensity[] = "camera_intensity";
static char __pyx_k_camera_mask_info[] = "camera_mask_info";
static char __pyx_k_camera_threshold[] = "camera_threshold";
static char __pyx_k_frame_time_stamp[] = "frame_time_stamp";
static char __pyx_k_load_bodies_file[] = "load_bodies_file";
static char __pyx_k_load_calibration[] = "load_calibration";
static char __pyx_k_set_camera_group[] = "set_camera_group";
static char __pyx_k_set_continous_ir[] = "set_continous_ir";
static char __pyx_k_blockingMaskWidth[] = "blockingMaskWidth";
static char __pyx_k_camera_frame_rate[] = "camera_frame_rate";
static char __pyx_k_camera_x_location[] = "camera_x_location";
static char __pyx_k_camera_y_location[] = "camera_y_location";
static char __pyx_k_camera_z_location[] = "camera_z_location";
static char __pyx_k_clear_camera_mask[] = "clear_camera_mask";
static char __pyx_k_create_rigid_body[] = "create_rigid_body";
static char __pyx_k_frame_marker_list[] = "frame_marker_list";
static char __pyx_k_load_rigid_bodies[] = "load_rigid_bodies";
static char __pyx_k_remove_rigid_body[] = "remove_rigid_body";
static char __pyx_k_rigid_bodies_file[] = "rigid_bodies_file";
static char __pyx_k_rigid_body_marker[] = "rigid_body_marker";
static char __pyx_k_save_rigid_bodies[] = "save_rigid_bodies";
static char __pyx_k_2D_y_position_is_f[] = "\n 2D y-position is %f";
static char __pyx_k_Error_or_no_marker[] = "Error or no marker";
static char __pyx_k_blockingMaskHeight[] = "blockingMaskHeight";
static char __pyx_k_camera_group_count[] = "camera_group_count";
static char __pyx_k_camera_imager_gain[] = "camera_imager_gain";
static char __pyx_k_camera_temperature[] = "camera_temperature";
static char __pyx_k_frame_marker_count[] = "frame_marker_count";
static char __pyx_k_rigid_body_enabled[] = "rigid_body_enabled";
static char __pyx_k_Mask_does_not_exist[] = "Mask does not exist";
static char __pyx_k_camera_marker_count[] = "camera_marker_count";
static char __pyx_k_create_camera_group[] = "create_camera_group";
static char __pyx_k_enableHighPowerMode[] = "enableHighPowerMode";
static char __pyx_k_flush_camera_queues[] = "flush_camera_queues";
static char __pyx_k_remove_camera_group[] = "remove_camera_group";
static char __pyx_k_rigid_body_location[] = "rigid_body_location";
static char __pyx_k_set_camera_settings[] = "set_camera_settings";
static char __pyx_k_update_single_frame[] = "update_single_frame";
static char __pyx_k_rigid_body_user_data[] = "rigid_body_user_data";
static char __pyx_k_clear_rigid_body_list[] = "clear_rigid_body_list";
static char __pyx_k_frame_camera_centroid[] = "frame_camera_centroid";
static char __pyx_k_is_rigid_body_tracked[] = "is_rigid_body_tracked";
static char __pyx_k_set_camera_frame_rate[] = "set_camera_frame_rate";
static char __pyx_k_set_camera_high_power[] = "set_camera_high_power";
static char __pyx_k_set_camera_imager_gain[] = "set_camera_imager_gain";
static char __pyx_k_set_rigid_body_enabled[] = "set_rigid_body_enabled";
static char __pyx_k_camera_pixel_resolution[] = "camera_pixel_resolution";
static char __pyx_k_rigid_body_marker_count[] = "rigid_body_marker_count";
static char __pyx_k_set_group_shutter_delay[] = "set_group_shutter_delay";
static char __pyx_k_is_filter_switch_enabled[] = "is_filter_switch_enabled";
static char __pyx_k_set_camera_filter_switch[] = "set_camera_filter_switch";
static char __pyx_k_set_enabled_filterswitch[] = "set_enabled_filterswitch";
static char __pyx_k_set_rigid_body_user_data[] = "set_rigid_body_user_data";
static char __pyx_k_camera_imager_gain_levels[] = "camera_imager_gain_levels";
static char __pyx_k_camera_orientation_matrix[] = "camera_orientation_matrix";
static char __pyx_k_enableAutomaticGainControl[] = "enableAutomaticGainControl";
static char __pyx_k_is_continuous_ir_available[] = "is_continuous_ir_available";
static char __pyx_k_rigid_body_translate_pivot[] = "rigid_body_translate_pivot";
static char __pyx_k_camera_grayscale_decimation[] = "camera_grayscale_decimation";
static char __pyx_k_load_calibration_from_memory[] = "load_calibration_from_memory";
static char __pyx_k_rigid_body_reset_orientation[] = "rigid_body_reset_orientation";
static char __pyx_k_Yaw_is_f_pitch_is_f_roll_is_f[] = "Yaw is %f, pitch is %f, roll is %f.";
static char __pyx_k_camera_ring_light_temperature[] = "camera_ring_light_temperature";
static char __pyx_k_rigid_body_point_cloud_marker[] = "rigid_body_point_cloud_marker";
static char __pyx_k_set_camera_mjpeg_high_quality[] = "set_camera_mjpeg_high_quality";
static char __pyx_k_enableAutomaticExposureControl[] = "enableAutomaticExposureControl";
static char __pyx_k_2D_x_position_as_seen_from_came[] = "\n \n 2D x-position as seen from camera %i is %f";
static char __pyx_k_Argument_should_be_buffername_i[] = "Argument should be buffername, i.e. a string literal";
static char __pyx_k_Argument_should_be_filename_i_e[] = "Argument should be filename, i.e. a string literal";
static char __pyx_k_Camera_i_blocking_masks_width_f[] = "Camera %i blocking masks width:%f, height:%f, grid:%f";
static char __pyx_k_Error_Possibly_no_mask_for_this[] = "Error. Possibly no mask for this camera";
static char __pyx_k_Error_could_not_remove_Check_if[] = "Error, could not remove. Check if group is empty";
static char __pyx_k_The_position_of_rigid_body_i_is[] = "The position of rigid body %i is x=%f, y=%f, z=%f. \n";
static char __pyx_k_There_is_no_corresponding_point[] = "There is no corresponding point cloud marker";
static char __pyx_k_set_camera_grayscale_decimation[] = "set_camera_grayscale_decimation";
static char __pyx_k_set_camera_group_reconstruction[] = "set_camera_group_reconstruction";
static char __pyx_k_C_Users_nico_Desktop_OptiTrackPy[] = "C:\\Users\\nico\\Desktop\\OptiTrackPythonWrap\\motivepy\\src\\native.pyx";
static char __pyx_k_Camera_is_not_contributing_to_th[] = "Camera is not contributing to the 3D position of this marker";
static char __pyx_k_Due_to_need_of_const_C_array_siz[] = "Due to need of const C array size, markerList max items=1000. \n Please resize const in native.pyx";
static char __pyx_k_Error_Possibly_the_camera_does_n[] = "Error. Possibly the camera does not have an IR filter";
static char __pyx_k_Orientation_in_quaternions_is_qx[] = "Orientation in quaternions is qx=%f, qy=%f, qz=%f, qw=%f. \n";
static char __pyx_k_Pixel_resolution_for_camera_i_is[] = "Pixel resolution for camera %i is width=%f, height=%f";
static char __pyx_k_The_2D_location_of_marker_i_is_x[] = "The 2D location of marker %i is x=%f, y=%f";
static char __pyx_k_The_point_cloud_markers_position[] = "The point cloud markers position is x=%f, y=%f, z=%f";
static char __pyx_k_The_position_of_rigid_body_s_i_m[] = "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n";
static char __pyx_k_Error_Possibly_the_camera_does_n_2[] = "Error. Possibly the camera does not have AGC";
static char __pyx_k_Error_Possibly_the_camera_does_n_3[] = "Error. Possibly the camera does not have AEC";
static char __pyx_k_Error_Possibly_the_camera_does_n_4[] = "Error. Possibly the camera does not have HighPowerMode";
static char __pyx_k_Error_Possibly_the_camera_does_n_5[] = "Error. Possibly the camera does not have HighQuality for MJPEG";
static PyObject *__pyx_kp_s_2D_x_position_as_seen_from_came;
static PyObject *__pyx_kp_s_2D_y_position_is_f;
static PyObject *__pyx_kp_s_Argument_should_be_buffername_i;
static PyObject *__pyx_kp_s_Argument_should_be_filename_i_e;
static PyObject *__pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy;
static PyObject *__pyx_kp_s_Camera_i_blocking_masks_width_f;
static PyObject *__pyx_kp_s_Camera_is_not_contributing_to_th;
static PyObject *__pyx_n_s_Cleared;
static PyObject *__pyx_kp_s_Due_to_need_of_const_C_array_siz;
static PyObject *__pyx_n_s_Error;
static PyObject *__pyx_kp_s_Error_Not_set;
static PyObject *__pyx_kp_s_Error_Possibly_no_mask_for_this;
static PyObject *__pyx_kp_s_Error_Possibly_the_camera_does_n;
static PyObject *__pyx_kp_s_Error_Possibly_the_camera_does_n_2;
static PyObject *__pyx_kp_s_Error_Possibly_the_camera_does_n_3;
static PyObject *__pyx_kp_s_Error_Possibly_the_camera_does_n_4;
static PyObject *__pyx_kp_s_Error_Possibly_the_camera_does_n_5;
static PyObject *__pyx_kp_s_Error_could_not_remove_Check_if;
static PyObject *__pyx_kp_s_Error_or_no_marker;
static PyObject *__pyx_n_s_False;
static PyObject *__pyx_n_s_Flushed;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_kp_s_Mask_does_not_exist;
static PyObject *__pyx_kp_s_Mask_exists;
static PyObject *__pyx_n_s_No;
static PyObject *__pyx_kp_s_Not_cleared;
static PyObject *__pyx_n_s_Off;
static PyObject *__pyx_n_s_On;
static PyObject *__pyx_kp_s_Orientation_in_quaternions_is_qx;
static PyObject *__pyx_kp_s_Pixel_resolution_for_camera_i_is;
static PyObject *__pyx_n_s_Removed;
static PyObject *__pyx_kp_s_Rigid_body_ID_i;
static PyObject *__pyx_n_s_Set;
static PyObject *__pyx_kp_s_The_2D_location_of_marker_i_is_x;
static PyObject *__pyx_kp_s_The_point_cloud_markers_position;
static PyObject *__pyx_kp_s_The_position_of_rigid_body_i_is;
static PyObject *__pyx_kp_s_The_position_of_rigid_body_s_i_m;
static PyObject *__pyx_kp_s_There_is_no_corresponding_point;
static PyObject *__pyx_n_s_True;
static PyObject *__pyx_n_s_Vash;
static PyObject *__pyx_kp_s_Yaw_is_f_pitch_is_f_roll_is_f;
static PyObject *__pyx_n_s_Yes;
static PyObject *__pyx_n_s_add_rigid_bodies;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_blockingMaskGrid;
static PyObject *__pyx_n_s_blockingMaskHeight;
static PyObject *__pyx_n_s_blockingMaskWidth;
static PyObject *__pyx_n_s_buffer;
static PyObject *__pyx_n_s_bufferSize;
static PyObject *__pyx_n_s_buffername;
static PyObject *__pyx_n_s_buffersize;
static PyObject *__pyx_n_s_calib_filename;
static PyObject *__pyx_n_s_camera;
static PyObject *__pyx_n_s_cameraGroupIndex;
static PyObject *__pyx_n_s_cameraIndex;
static PyObject *__pyx_n_s_camera_count;
static PyObject *__pyx_n_s_camera_exposure;
static PyObject *__pyx_n_s_camera_frame_rate;
static PyObject *__pyx_n_s_camera_grayscale_decimation;
static PyObject *__pyx_n_s_camera_group_count;
static PyObject *__pyx_n_s_camera_imager_gain;
static PyObject *__pyx_n_s_camera_imager_gain_levels;
static PyObject *__pyx_n_s_camera_intensity;
static PyObject *__pyx_n_s_camera_marker;
static PyObject *__pyx_n_s_camera_marker_count;
static PyObject *__pyx_n_s_camera_mask;
static PyObject *__pyx_n_s_camera_mask_info;
static PyObject *__pyx_n_s_camera_name;
static PyObject *__pyx_n_s_camera_orientation_matrix;
static PyObject *__pyx_n_s_camera_pixel_resolution;
static PyObject *__pyx_n_s_camera_ring_light_temperature;
static PyObject *__pyx_n_s_camera_temperature;
static PyObject *__pyx_n_s_camera_threshold;
static PyObject *__pyx_n_s_camera_x_location;
static PyObject *__pyx_n_s_camera_y_location;
static PyObject *__pyx_n_s_camera_z_location;
static PyObject *__pyx_n_s_cameras_group;
static PyObject *__pyx_n_s_camindex;
static PyObject *__pyx_n_s_clear_camera_mask;
static PyObject *__pyx_n_s_clear_rigid_body_list;
static PyObject *__pyx_n_s_continuous_ir;
static PyObject *__pyx_n_s_create_camera_group;
static PyObject *__pyx_n_s_create_rigid_body;
static PyObject *__pyx_n_s_enable;
static PyObject *__pyx_n_s_enableAutomaticExposureControl;
static PyObject *__pyx_n_s_enableAutomaticGainControl;
static PyObject *__pyx_n_s_enableHighPowerMode;
static PyObject *__pyx_n_s_enableIRFilter;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_exposure;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flush_camera_queues;
static PyObject *__pyx_n_s_frameRate;
static PyObject *__pyx_n_s_frame_camera_centroid;
static PyObject *__pyx_n_s_frame_marker_count;
static PyObject *__pyx_n_s_frame_marker_list;
static PyObject *__pyx_n_s_frame_marker_x;
static PyObject *__pyx_n_s_frame_marker_y;
static PyObject *__pyx_n_s_frame_marker_z;
static PyObject *__pyx_n_s_frame_time_stamp;
static PyObject *__pyx_n_s_groupIndex;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_intensity;
static PyObject *__pyx_n_s_is_continuous_ir_available;
static PyObject *__pyx_n_s_is_filter_switch_enabled;
static PyObject *__pyx_n_s_is_rigid_body_tracked;
static PyObject *__pyx_n_s_load_bodies_file;
static PyObject *__pyx_n_s_load_calibration;
static PyObject *__pyx_n_s_load_calibration_from_memory;
static PyObject *__pyx_n_s_load_project;
static PyObject *__pyx_n_s_load_rigid_bodies;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_markerCount;
static PyObject *__pyx_n_s_markerIndex;
static PyObject *__pyx_n_s_markerList;
static PyObject *__pyx_n_s_markerListp;
static PyObject *__pyx_n_s_marker_list;
static PyObject *__pyx_n_s_microseconds;
static PyObject *__pyx_n_s_mjpegQuality;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_native;
static PyObject *__pyx_n_s_pitch;
static PyObject *__pyx_n_s_port;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_project_file;
static PyObject *__pyx_n_s_qw;
static PyObject *__pyx_n_s_qx;
static PyObject *__pyx_n_s_qy;
static PyObject *__pyx_n_s_qz;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_remove_camera_group;
static PyObject *__pyx_n_s_remove_rigid_body;
static PyObject *__pyx_n_s_rigidIndex;
static PyObject *__pyx_n_s_rigid_bodies_file;
static PyObject *__pyx_n_s_rigid_body_enabled;
static PyObject *__pyx_n_s_rigid_body_location;
static PyObject *__pyx_n_s_rigid_body_marker;
static PyObject *__pyx_n_s_rigid_body_marker_count;
static PyObject *__pyx_n_s_rigid_body_name;
static PyObject *__pyx_n_s_rigid_body_point_cloud_marker;
static PyObject *__pyx_n_s_rigid_body_reset_orientation;
static PyObject *__pyx_n_s_rigid_body_translate_pivot;
static PyObject *__pyx_n_s_rigid_body_user_data;
static PyObject *__pyx_n_s_rigid_filename;
static PyObject *__pyx_n_s_roll;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_n_s_save_project;
static PyObject *__pyx_n_s_save_rigid_bodies;
static PyObject *__pyx_n_s_set_camera_aec;
static PyObject *__pyx_n_s_set_camera_agc;
static PyObject *__pyx_n_s_set_camera_filter_switch;
static PyObject *__pyx_n_s_set_camera_frame_rate;
static PyObject *__pyx_n_s_set_camera_grayscale_decimation;
static PyObject *__pyx_n_s_set_camera_group;
static PyObject *__pyx_n_s_set_camera_group_reconstruction;
static PyObject *__pyx_n_s_set_camera_high_power;
static PyObject *__pyx_n_s_set_camera_imager_gain;
static PyObject *__pyx_n_s_set_camera_mask;
static PyObject *__pyx_n_s_set_camera_mjpeg_high_quality;
static PyObject *__pyx_n_s_set_camera_settings;
static PyObject *__pyx_n_s_set_continous_ir;
static PyObject *__pyx_n_s_set_enabled_filterswitch;
static PyObject *__pyx_n_s_set_group_shutter_delay;
static PyObject *__pyx_n_s_set_rigid_body_enabled;
static PyObject *__pyx_n_s_set_rigid_body_user_data;
static PyObject *__pyx_n_s_shutdown;
static PyObject *__pyx_n_s_software_build;
static PyObject *__pyx_n_s_stream_np;
static PyObject *__pyx_n_s_stream_trackd;
static PyObject *__pyx_n_s_stream_vrpn;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_tracked;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_single_frame;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_videotype;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_yaw;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_int_0;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;

/* "native.pyx":9
 * 
 * #STARTUP / SHUTDOWN
 * def initialize():             # <<<<<<<<<<<<<<
 *     """initialize library"""
 *     return TT_Initialize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_1initialize(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_initialize[] = "initialize library";
static PyMethodDef __pyx_mdef_6native_1initialize = {"initialize", (PyCFunction)__pyx_pw_6native_1initialize, METH_NOARGS, __pyx_doc_6native_initialize};
static PyObject *__pyx_pw_6native_1initialize(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_initialize(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_initialize(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "native.pyx":11
 * def initialize():
 *     """initialize library"""
 *     return TT_Initialize()             # <<<<<<<<<<<<<<
 * 
 * def shutdown():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_Initialize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":9
 * 
 * #STARTUP / SHUTDOWN
 * def initialize():             # <<<<<<<<<<<<<<
 *     """initialize library"""
 *     return TT_Initialize()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":13
 *     return TT_Initialize()
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """shutdown library"""
 *     return TT_Shutdown()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_3shutdown(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_2shutdown[] = "shutdown library";
static PyMethodDef __pyx_mdef_6native_3shutdown = {"shutdown", (PyCFunction)__pyx_pw_6native_3shutdown, METH_NOARGS, __pyx_doc_6native_2shutdown};
static PyObject *__pyx_pw_6native_3shutdown(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_2shutdown(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_2shutdown(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shutdown", 0);

  /* "native.pyx":15
 * def shutdown():
 *     """shutdown library"""
 *     return TT_Shutdown()             # <<<<<<<<<<<<<<
 * 
 * #RIGID BODY INTERFACE ##FILES
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_Shutdown()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":13
 *     return TT_Initialize()
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """shutdown library"""
 *     return TT_Shutdown()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":18
 * 
 * #RIGID BODY INTERFACE ##FILES
 * def load_calibration(calib_filename):             # <<<<<<<<<<<<<<
 *     """load calibration"""
 *     assert type(calib_filename) is str, "Argument should be filename, i.e. a string literal"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_5load_calibration(PyObject *__pyx_self, PyObject *__pyx_v_calib_filename); /*proto*/
static char __pyx_doc_6native_4load_calibration[] = "load calibration";
static PyMethodDef __pyx_mdef_6native_5load_calibration = {"load_calibration", (PyCFunction)__pyx_pw_6native_5load_calibration, METH_O, __pyx_doc_6native_4load_calibration};
static PyObject *__pyx_pw_6native_5load_calibration(PyObject *__pyx_self, PyObject *__pyx_v_calib_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_calibration (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_4load_calibration(__pyx_self, ((PyObject *)__pyx_v_calib_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_4load_calibration(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_calib_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_calibration", 0);

  /* "native.pyx":20
 * def load_calibration(calib_filename):
 *     """load calibration"""
 *     assert type(calib_filename) is str, "Argument should be filename, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     return TT_LoadCalibration(calib_filename)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_calib_filename)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_filename_i_e);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":21
 *     """load calibration"""
 *     assert type(calib_filename) is str, "Argument should be filename, i.e. a string literal"
 *     return TT_LoadCalibration(calib_filename)             # <<<<<<<<<<<<<<
 * 
 * def load_rigid_bodies(load_bodies_file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_calib_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_LoadCalibration(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":18
 * 
 * #RIGID BODY INTERFACE ##FILES
 * def load_calibration(calib_filename):             # <<<<<<<<<<<<<<
 *     """load calibration"""
 *     assert type(calib_filename) is str, "Argument should be filename, i.e. a string literal"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.load_calibration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":23
 *     return TT_LoadCalibration(calib_filename)
 * 
 * def load_rigid_bodies(load_bodies_file):             # <<<<<<<<<<<<<<
 *     """load rigid bodies"""
 *     assert type(load_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_7load_rigid_bodies(PyObject *__pyx_self, PyObject *__pyx_v_load_bodies_file); /*proto*/
static char __pyx_doc_6native_6load_rigid_bodies[] = "load rigid bodies";
static PyMethodDef __pyx_mdef_6native_7load_rigid_bodies = {"load_rigid_bodies", (PyCFunction)__pyx_pw_6native_7load_rigid_bodies, METH_O, __pyx_doc_6native_6load_rigid_bodies};
static PyObject *__pyx_pw_6native_7load_rigid_bodies(PyObject *__pyx_self, PyObject *__pyx_v_load_bodies_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_rigid_bodies (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_6load_rigid_bodies(__pyx_self, ((PyObject *)__pyx_v_load_bodies_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_6load_rigid_bodies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_load_bodies_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_rigid_bodies", 0);

  /* "native.pyx":25
 * def load_rigid_bodies(load_bodies_file):
 *     """load rigid bodies"""
 *     assert type(load_bodies_file) is str, "Argument should be filename, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     return TT_LoadRigidBodies(load_bodies_file)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_load_bodies_file)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_filename_i_e);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":26
 *     """load rigid bodies"""
 *     assert type(load_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 *     return TT_LoadRigidBodies(load_bodies_file)             # <<<<<<<<<<<<<<
 * 
 * def save_rigid_bodies(rigid_filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_load_bodies_file); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_LoadRigidBodies(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":23
 *     return TT_LoadCalibration(calib_filename)
 * 
 * def load_rigid_bodies(load_bodies_file):             # <<<<<<<<<<<<<<
 *     """load rigid bodies"""
 *     assert type(load_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.load_rigid_bodies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":28
 *     return TT_LoadRigidBodies(load_bodies_file)
 * 
 * def save_rigid_bodies(rigid_filename):             # <<<<<<<<<<<<<<
 *     """save rigid bodies"""
 *     assert type(rigid_filename) is str, "Argument should be filename, i.e. a string literal"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_9save_rigid_bodies(PyObject *__pyx_self, PyObject *__pyx_v_rigid_filename); /*proto*/
static char __pyx_doc_6native_8save_rigid_bodies[] = "save rigid bodies";
static PyMethodDef __pyx_mdef_6native_9save_rigid_bodies = {"save_rigid_bodies", (PyCFunction)__pyx_pw_6native_9save_rigid_bodies, METH_O, __pyx_doc_6native_8save_rigid_bodies};
static PyObject *__pyx_pw_6native_9save_rigid_bodies(PyObject *__pyx_self, PyObject *__pyx_v_rigid_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_rigid_bodies (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_8save_rigid_bodies(__pyx_self, ((PyObject *)__pyx_v_rigid_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_8save_rigid_bodies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rigid_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_rigid_bodies", 0);

  /* "native.pyx":30
 * def save_rigid_bodies(rigid_filename):
 *     """save rigid bodies"""
 *     assert type(rigid_filename) is str, "Argument should be filename, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     return TT_SaveRigidBodies(rigid_filename)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_rigid_filename)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_filename_i_e);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":31
 *     """save rigid bodies"""
 *     assert type(rigid_filename) is str, "Argument should be filename, i.e. a string literal"
 *     return TT_SaveRigidBodies(rigid_filename)             # <<<<<<<<<<<<<<
 * 
 * def add_rigid_bodies(rigid_bodies_file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_rigid_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_SaveRigidBodies(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":28
 *     return TT_LoadRigidBodies(load_bodies_file)
 * 
 * def save_rigid_bodies(rigid_filename):             # <<<<<<<<<<<<<<
 *     """save rigid bodies"""
 *     assert type(rigid_filename) is str, "Argument should be filename, i.e. a string literal"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.save_rigid_bodies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":33
 *     return TT_SaveRigidBodies(rigid_filename)
 * 
 * def add_rigid_bodies(rigid_bodies_file):             # <<<<<<<<<<<<<<
 *     """add rigid bodies"""
 *     assert type(rigid_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_11add_rigid_bodies(PyObject *__pyx_self, PyObject *__pyx_v_rigid_bodies_file); /*proto*/
static char __pyx_doc_6native_10add_rigid_bodies[] = "add rigid bodies";
static PyMethodDef __pyx_mdef_6native_11add_rigid_bodies = {"add_rigid_bodies", (PyCFunction)__pyx_pw_6native_11add_rigid_bodies, METH_O, __pyx_doc_6native_10add_rigid_bodies};
static PyObject *__pyx_pw_6native_11add_rigid_bodies(PyObject *__pyx_self, PyObject *__pyx_v_rigid_bodies_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rigid_bodies (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_10add_rigid_bodies(__pyx_self, ((PyObject *)__pyx_v_rigid_bodies_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_10add_rigid_bodies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rigid_bodies_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_rigid_bodies", 0);

  /* "native.pyx":35
 * def add_rigid_bodies(rigid_bodies_file):
 *     """add rigid bodies"""
 *     assert type(rigid_bodies_file) is str, "Argument should be filename, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     return TT_AddRigidBodies(rigid_bodies_file)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_rigid_bodies_file)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_filename_i_e);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":36
 *     """add rigid bodies"""
 *     assert type(rigid_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 *     return TT_AddRigidBodies(rigid_bodies_file)             # <<<<<<<<<<<<<<
 * 
 * def load_project(project_file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_rigid_bodies_file); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_AddRigidBodies(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":33
 *     return TT_SaveRigidBodies(rigid_filename)
 * 
 * def add_rigid_bodies(rigid_bodies_file):             # <<<<<<<<<<<<<<
 *     """add rigid bodies"""
 *     assert type(rigid_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.add_rigid_bodies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":38
 *     return TT_AddRigidBodies(rigid_bodies_file)
 * 
 * def load_project(project_file):             # <<<<<<<<<<<<<<
 *     """load project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_13load_project(PyObject *__pyx_self, PyObject *__pyx_v_project_file); /*proto*/
static char __pyx_doc_6native_12load_project[] = "load project file";
static PyMethodDef __pyx_mdef_6native_13load_project = {"load_project", (PyCFunction)__pyx_pw_6native_13load_project, METH_O, __pyx_doc_6native_12load_project};
static PyObject *__pyx_pw_6native_13load_project(PyObject *__pyx_self, PyObject *__pyx_v_project_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_project (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_12load_project(__pyx_self, ((PyObject *)__pyx_v_project_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_12load_project(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_project_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_project", 0);

  /* "native.pyx":40
 * def load_project(project_file):
 *     """load project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     return TT_LoadProject(project_file)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_project_file)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_filename_i_e);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":41
 *     """load project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 *     return TT_LoadProject(project_file)             # <<<<<<<<<<<<<<
 * 
 * def save_project(project_file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_project_file); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_LoadProject(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":38
 *     return TT_AddRigidBodies(rigid_bodies_file)
 * 
 * def load_project(project_file):             # <<<<<<<<<<<<<<
 *     """load project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.load_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":43
 *     return TT_LoadProject(project_file)
 * 
 * def save_project(project_file):             # <<<<<<<<<<<<<<
 *     """save project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_15save_project(PyObject *__pyx_self, PyObject *__pyx_v_project_file); /*proto*/
static char __pyx_doc_6native_14save_project[] = "save project file";
static PyMethodDef __pyx_mdef_6native_15save_project = {"save_project", (PyCFunction)__pyx_pw_6native_15save_project, METH_O, __pyx_doc_6native_14save_project};
static PyObject *__pyx_pw_6native_15save_project(PyObject *__pyx_self, PyObject *__pyx_v_project_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_project (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_14save_project(__pyx_self, ((PyObject *)__pyx_v_project_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_14save_project(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_project_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_project", 0);

  /* "native.pyx":45
 * def save_project(project_file):
 *     """save project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     return TT_SaveProject(project_file)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_project_file)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_filename_i_e);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":46
 *     """save project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 *     return TT_SaveProject(project_file)             # <<<<<<<<<<<<<<
 * 
 * def load_calibration_from_memory(buffername,int buffersize):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_project_file); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_SaveProject(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":43
 *     return TT_LoadProject(project_file)
 * 
 * def save_project(project_file):             # <<<<<<<<<<<<<<
 *     """save project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.save_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":48
 *     return TT_SaveProject(project_file)
 * 
 * def load_calibration_from_memory(buffername,int buffersize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_17load_calibration_from_memory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_17load_calibration_from_memory = {"load_calibration_from_memory", (PyCFunction)__pyx_pw_6native_17load_calibration_from_memory, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_17load_calibration_from_memory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_buffername = 0;
  int __pyx_v_buffersize;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_calibration_from_memory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buffername,&__pyx_n_s_buffersize,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buffername)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buffersize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load_calibration_from_memory", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_calibration_from_memory") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_buffername = values[0];
    __pyx_v_buffersize = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_buffersize == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_calibration_from_memory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.load_calibration_from_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_16load_calibration_from_memory(__pyx_self, __pyx_v_buffername, __pyx_v_buffersize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_16load_calibration_from_memory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buffername, int __pyx_v_buffersize) {
  unsigned char *__pyx_v_buffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_calibration_from_memory", 0);

  /* "native.pyx":49
 * 
 * def load_calibration_from_memory(buffername,int buffersize):
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer=buffername
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_buffername)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_buffername_i);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":50
 * def load_calibration_from_memory(buffername,int buffersize):
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername             # <<<<<<<<<<<<<<
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_AsUString(__pyx_v_buffername); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_buffer = __pyx_t_2;

  /* "native.pyx":51
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)             # <<<<<<<<<<<<<<
 * 
 * def update():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_LoadCalibrationFromMemory(__pyx_v_buffer, __pyx_v_buffersize)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":48
 *     return TT_SaveProject(project_file)
 * 
 * def load_calibration_from_memory(buffername,int buffersize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.load_calibration_from_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":53
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)
 * 
 * def update():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_Update()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_19update(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_18update[] = "Process incoming camera data";
static PyMethodDef __pyx_mdef_6native_19update = {"update", (PyCFunction)__pyx_pw_6native_19update, METH_NOARGS, __pyx_doc_6native_18update};
static PyObject *__pyx_pw_6native_19update(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_18update(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_18update(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "native.pyx":55
 * def update():
 *     """Process incoming camera data"""
 *     return TT_Update()             # <<<<<<<<<<<<<<
 * 
 * def update_single_frame():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_Update()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":53
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)
 * 
 * def update():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_Update()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":57
 *     return TT_Update()
 * 
 * def update_single_frame():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_UpdateSingleFrame()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_21update_single_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_20update_single_frame[] = "Process incoming camera data";
static PyMethodDef __pyx_mdef_6native_21update_single_frame = {"update_single_frame", (PyCFunction)__pyx_pw_6native_21update_single_frame, METH_NOARGS, __pyx_doc_6native_20update_single_frame};
static PyObject *__pyx_pw_6native_21update_single_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_single_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_20update_single_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_20update_single_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_single_frame", 0);

  /* "native.pyx":59
 * def update_single_frame():
 *     """Process incoming camera data"""
 *     return TT_UpdateSingleFrame()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_UpdateSingleFrame()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":57
 *     return TT_Update()
 * 
 * def update_single_frame():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_UpdateSingleFrame()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.update_single_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":63
 * 
 * #DATA STREAMING
 * def stream_trackd(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop Trackd Stream
 *        TrackD Streaming Engine: Streams rigid body data via the Trackd protocol"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_23stream_trackd(PyObject *__pyx_self, PyObject *__pyx_arg_enabled); /*proto*/
static char __pyx_doc_6native_22stream_trackd[] = "Start/stop Trackd Stream\n       TrackD Streaming Engine: Streams rigid body data via the Trackd protocol";
static PyMethodDef __pyx_mdef_6native_23stream_trackd = {"stream_trackd", (PyCFunction)__pyx_pw_6native_23stream_trackd, METH_O, __pyx_doc_6native_22stream_trackd};
static PyObject *__pyx_pw_6native_23stream_trackd(PyObject *__pyx_self, PyObject *__pyx_arg_enabled) {
  bool __pyx_v_enabled;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stream_trackd (wrapper)", 0);
  assert(__pyx_arg_enabled); {
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(__pyx_arg_enabled); if (unlikely((__pyx_v_enabled == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.stream_trackd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_22stream_trackd(__pyx_self, ((bool)__pyx_v_enabled));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_22stream_trackd(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stream_trackd", 0);

  /* "native.pyx":66
 *     """Start/stop Trackd Stream
 *        TrackD Streaming Engine: Streams rigid body data via the Trackd protocol"""
 *     return TT_StreamTrackd(enabled)             # <<<<<<<<<<<<<<
 * 
 * def stream_vrpn(bool enabled, int port):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_StreamTrackd(__pyx_v_enabled)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":63
 * 
 * #DATA STREAMING
 * def stream_trackd(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop Trackd Stream
 *        TrackD Streaming Engine: Streams rigid body data via the Trackd protocol"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.stream_trackd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":68
 *     return TT_StreamTrackd(enabled)
 * 
 * def stream_vrpn(bool enabled, int port):             # <<<<<<<<<<<<<<
 *     """Start/stop VRPN Stream
 *        VRPN Streaming Engine: Streams rigid body data via the VRPN protocol.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_25stream_vrpn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_24stream_vrpn[] = "Start/stop VRPN Stream\n       VRPN Streaming Engine: Streams rigid body data via the VRPN protocol.\n       VRPN Broadcast Port: Specifies the broadcast port for VRPN streaming. (Default: 3883)";
static PyMethodDef __pyx_mdef_6native_25stream_vrpn = {"stream_vrpn", (PyCFunction)__pyx_pw_6native_25stream_vrpn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_24stream_vrpn};
static PyObject *__pyx_pw_6native_25stream_vrpn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_enabled;
  int __pyx_v_port;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stream_vrpn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_enabled,&__pyx_n_s_port,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enabled)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_port)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stream_vrpn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stream_vrpn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_enabled == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_port = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_port == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stream_vrpn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.stream_vrpn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_24stream_vrpn(__pyx_self, __pyx_v_enabled, __pyx_v_port);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_24stream_vrpn(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled, int __pyx_v_port) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stream_vrpn", 0);

  /* "native.pyx":72
 *        VRPN Streaming Engine: Streams rigid body data via the VRPN protocol.
 *        VRPN Broadcast Port: Specifies the broadcast port for VRPN streaming. (Default: 3883)"""
 *     return TT_StreamVRPN(enabled, port)             # <<<<<<<<<<<<<<
 * 
 * def stream_np(bool enabled):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_StreamVRPN(__pyx_v_enabled, __pyx_v_port)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":68
 *     return TT_StreamTrackd(enabled)
 * 
 * def stream_vrpn(bool enabled, int port):             # <<<<<<<<<<<<<<
 *     """Start/stop VRPN Stream
 *        VRPN Streaming Engine: Streams rigid body data via the VRPN protocol.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.stream_vrpn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":74
 *     return TT_StreamVRPN(enabled, port)
 * 
 * def stream_np(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop NaturalPoint Stream"""
 *     return TT_StreamNP(enabled)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_27stream_np(PyObject *__pyx_self, PyObject *__pyx_arg_enabled); /*proto*/
static char __pyx_doc_6native_26stream_np[] = "Start/stop NaturalPoint Stream";
static PyMethodDef __pyx_mdef_6native_27stream_np = {"stream_np", (PyCFunction)__pyx_pw_6native_27stream_np, METH_O, __pyx_doc_6native_26stream_np};
static PyObject *__pyx_pw_6native_27stream_np(PyObject *__pyx_self, PyObject *__pyx_arg_enabled) {
  bool __pyx_v_enabled;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stream_np (wrapper)", 0);
  assert(__pyx_arg_enabled); {
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(__pyx_arg_enabled); if (unlikely((__pyx_v_enabled == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.stream_np", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_26stream_np(__pyx_self, ((bool)__pyx_v_enabled));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_26stream_np(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stream_np", 0);

  /* "native.pyx":76
 * def stream_np(bool enabled):
 *     """Start/stop NaturalPoint Stream"""
 *     return TT_StreamNP(enabled)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_StreamNP(__pyx_v_enabled)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":74
 *     return TT_StreamVRPN(enabled, port)
 * 
 * def stream_np(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop NaturalPoint Stream"""
 *     return TT_StreamNP(enabled)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.stream_np", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":80
 * 
 * #FRAME
 * def frame_marker_count():             # <<<<<<<<<<<<<<
 *     """Returns Frame Markers Count"""
 *     return TT_FrameMarkerCount()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_29frame_marker_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_28frame_marker_count[] = "Returns Frame Markers Count";
static PyMethodDef __pyx_mdef_6native_29frame_marker_count = {"frame_marker_count", (PyCFunction)__pyx_pw_6native_29frame_marker_count, METH_NOARGS, __pyx_doc_6native_28frame_marker_count};
static PyObject *__pyx_pw_6native_29frame_marker_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_marker_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_28frame_marker_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_28frame_marker_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_marker_count", 0);

  /* "native.pyx":82
 * def frame_marker_count():
 *     """Returns Frame Markers Count"""
 *     return TT_FrameMarkerCount()             # <<<<<<<<<<<<<<
 * 
 * def frame_marker_x(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_FrameMarkerCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":80
 * 
 * #FRAME
 * def frame_marker_count():             # <<<<<<<<<<<<<<
 *     """Returns Frame Markers Count"""
 *     return TT_FrameMarkerCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.frame_marker_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":84
 *     return TT_FrameMarkerCount()
 * 
 * def frame_marker_x(int index):             # <<<<<<<<<<<<<<
 *     """Returns X Coord of Marker"""
 *     return TT_FrameMarkerX(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_31frame_marker_x(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_30frame_marker_x[] = "Returns X Coord of Marker";
static PyMethodDef __pyx_mdef_6native_31frame_marker_x = {"frame_marker_x", (PyCFunction)__pyx_pw_6native_31frame_marker_x, METH_O, __pyx_doc_6native_30frame_marker_x};
static PyObject *__pyx_pw_6native_31frame_marker_x(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_marker_x (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.frame_marker_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_30frame_marker_x(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_30frame_marker_x(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_marker_x", 0);

  /* "native.pyx":86
 * def frame_marker_x(int index):
 *     """Returns X Coord of Marker"""
 *     return TT_FrameMarkerX(index)             # <<<<<<<<<<<<<<
 * 
 * def frame_marker_y(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_FrameMarkerX(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":84
 *     return TT_FrameMarkerCount()
 * 
 * def frame_marker_x(int index):             # <<<<<<<<<<<<<<
 *     """Returns X Coord of Marker"""
 *     return TT_FrameMarkerX(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.frame_marker_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":88
 *     return TT_FrameMarkerX(index)
 * 
 * def frame_marker_y(int index):             # <<<<<<<<<<<<<<
 *     """Returns Y Coord of Marker"""
 *     return TT_FrameMarkerY(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_33frame_marker_y(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_32frame_marker_y[] = "Returns Y Coord of Marker";
static PyMethodDef __pyx_mdef_6native_33frame_marker_y = {"frame_marker_y", (PyCFunction)__pyx_pw_6native_33frame_marker_y, METH_O, __pyx_doc_6native_32frame_marker_y};
static PyObject *__pyx_pw_6native_33frame_marker_y(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_marker_y (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.frame_marker_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_32frame_marker_y(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_32frame_marker_y(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_marker_y", 0);

  /* "native.pyx":90
 * def frame_marker_y(int index):
 *     """Returns Y Coord of Marker"""
 *     return TT_FrameMarkerY(index)             # <<<<<<<<<<<<<<
 * 
 * def frame_marker_z(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_FrameMarkerY(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":88
 *     return TT_FrameMarkerX(index)
 * 
 * def frame_marker_y(int index):             # <<<<<<<<<<<<<<
 *     """Returns Y Coord of Marker"""
 *     return TT_FrameMarkerY(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.frame_marker_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":92
 *     return TT_FrameMarkerY(index)
 * 
 * def frame_marker_z(int index):             # <<<<<<<<<<<<<<
 *     """Returns Z Coord of Marker"""
 *     return TT_FrameMarkerZ(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_35frame_marker_z(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_34frame_marker_z[] = "Returns Z Coord of Marker";
static PyMethodDef __pyx_mdef_6native_35frame_marker_z = {"frame_marker_z", (PyCFunction)__pyx_pw_6native_35frame_marker_z, METH_O, __pyx_doc_6native_34frame_marker_z};
static PyObject *__pyx_pw_6native_35frame_marker_z(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_marker_z (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.frame_marker_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_34frame_marker_z(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_34frame_marker_z(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_marker_z", 0);

  /* "native.pyx":94
 * def frame_marker_z(int index):
 *     """Returns Z Coord of Marker"""
 *     return TT_FrameMarkerZ(index)             # <<<<<<<<<<<<<<
 * 
 * def frame_marker_list():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_FrameMarkerZ(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":92
 *     return TT_FrameMarkerY(index)
 * 
 * def frame_marker_z(int index):             # <<<<<<<<<<<<<<
 *     """Returns Z Coord of Marker"""
 *     return TT_FrameMarkerZ(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.frame_marker_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":96
 *     return TT_FrameMarkerZ(index)
 * 
 * def frame_marker_list():             # <<<<<<<<<<<<<<
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_37frame_marker_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6native_37frame_marker_list = {"frame_marker_list", (PyCFunction)__pyx_pw_6native_37frame_marker_list, METH_NOARGS, 0};
static PyObject *__pyx_pw_6native_37frame_marker_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_marker_list (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_36frame_marker_list(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_36frame_marker_list(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_marker_list = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_marker_list", 0);

  /* "native.pyx":97
 * 
 * def frame_marker_list():
 *     marker_list=[]             # <<<<<<<<<<<<<<
 *     for i in range(0,frame_marker_count()):
 *         marker_list.append(frame_marker_x(i))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_marker_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "native.pyx":98
 * def frame_marker_list():
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):             # <<<<<<<<<<<<<<
 *         marker_list.append(frame_marker_x(i))
 *         marker_list.append(frame_marker_y(i))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_frame_marker_count); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "native.pyx":99
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):
 *         marker_list.append(frame_marker_x(i))             # <<<<<<<<<<<<<<
 *         marker_list.append(frame_marker_y(i))
 *         marker_list.append(frame_marker_z(i))
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_frame_marker_x); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_i);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_marker_list, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "native.pyx":100
 *     for i in range(0,frame_marker_count()):
 *         marker_list.append(frame_marker_x(i))
 *         marker_list.append(frame_marker_y(i))             # <<<<<<<<<<<<<<
 *         marker_list.append(frame_marker_z(i))
 *     return marker_list
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_frame_marker_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_i);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_marker_list, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "native.pyx":101
 *         marker_list.append(frame_marker_x(i))
 *         marker_list.append(frame_marker_y(i))
 *         marker_list.append(frame_marker_z(i))             # <<<<<<<<<<<<<<
 *     return marker_list
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_frame_marker_z); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_i);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_marker_list, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "native.pyx":98
 * def frame_marker_list():
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):             # <<<<<<<<<<<<<<
 *         marker_list.append(frame_marker_x(i))
 *         marker_list.append(frame_marker_y(i))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "native.pyx":102
 *         marker_list.append(frame_marker_y(i))
 *         marker_list.append(frame_marker_z(i))
 *     return marker_list             # <<<<<<<<<<<<<<
 * 
 * def frame_time_stamp():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_marker_list);
  __pyx_r = __pyx_v_marker_list;
  goto __pyx_L0;

  /* "native.pyx":96
 *     return TT_FrameMarkerZ(index)
 * 
 * def frame_marker_list():             # <<<<<<<<<<<<<<
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("native.frame_marker_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marker_list);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":104
 *     return marker_list
 * 
 * def frame_time_stamp():             # <<<<<<<<<<<<<<
 *     """Time Stamp of Frame (seconds"""
 *     return TT_FrameTimeStamp()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_39frame_time_stamp(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_38frame_time_stamp[] = "Time Stamp of Frame (seconds";
static PyMethodDef __pyx_mdef_6native_39frame_time_stamp = {"frame_time_stamp", (PyCFunction)__pyx_pw_6native_39frame_time_stamp, METH_NOARGS, __pyx_doc_6native_38frame_time_stamp};
static PyObject *__pyx_pw_6native_39frame_time_stamp(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_time_stamp (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_38frame_time_stamp(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_38frame_time_stamp(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_time_stamp", 0);

  /* "native.pyx":106
 * def frame_time_stamp():
 *     """Time Stamp of Frame (seconds"""
 *     return TT_FrameTimeStamp()             # <<<<<<<<<<<<<<
 * 
 * def frame_camera_centroid(int index, int cameraIndex, float x, float y):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_FrameTimeStamp()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":104
 *     return marker_list
 * 
 * def frame_time_stamp():             # <<<<<<<<<<<<<<
 *     """Time Stamp of Frame (seconds"""
 *     return TT_FrameTimeStamp()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.frame_time_stamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":108
 *     return TT_FrameTimeStamp()
 * 
 * def frame_camera_centroid(int index, int cameraIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """Returns true if the camera is contributing to this 3D marker.
 *        It also returns the location of the 2D centroid that is reconstructing to this 3D marker"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_41frame_camera_centroid(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_40frame_camera_centroid[] = "Returns true if the camera is contributing to this 3D marker.\n       It also returns the location of the 2D centroid that is reconstructing to this 3D marker";
static PyMethodDef __pyx_mdef_6native_41frame_camera_centroid = {"frame_camera_centroid", (PyCFunction)__pyx_pw_6native_41frame_camera_centroid, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_40frame_camera_centroid};
static PyObject *__pyx_pw_6native_41frame_camera_centroid(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  int __pyx_v_cameraIndex;
  float __pyx_v_x;
  float __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("frame_camera_centroid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_cameraIndex,&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frame_camera_centroid", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frame_camera_centroid", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("frame_camera_centroid", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "frame_camera_centroid") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("frame_camera_centroid", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.frame_camera_centroid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_40frame_camera_centroid(__pyx_self, __pyx_v_index, __pyx_v_cameraIndex, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_40frame_camera_centroid(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, int __pyx_v_cameraIndex, float __pyx_v_x, float __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("frame_camera_centroid", 0);

  /* "native.pyx":111
 *     """Returns true if the camera is contributing to this 3D marker.
 *        It also returns the location of the 2D centroid that is reconstructing to this 3D marker"""
 *     if TT_FrameCameraCentroid(index,cameraIndex, x, y):             # <<<<<<<<<<<<<<
 *         print "\n \n 2D x-position as seen from camera %i is %f" % (cameraIndex, x)
 *         print "\n 2D y-position is %f" % y
 */
  __pyx_t_1 = (TT_FrameCameraCentroid(__pyx_v_index, __pyx_v_cameraIndex, __pyx_v_x, __pyx_v_y) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":112
 *        It also returns the location of the 2D centroid that is reconstructing to this 3D marker"""
 *     if TT_FrameCameraCentroid(index,cameraIndex, x, y):
 *         print "\n \n 2D x-position as seen from camera %i is %f" % (cameraIndex, x)             # <<<<<<<<<<<<<<
 *         print "\n 2D y-position is %f" % y
 *     else:
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_cameraIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_2D_x_position_as_seen_from_came, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "native.pyx":113
 *     if TT_FrameCameraCentroid(index,cameraIndex, x, y):
 *         print "\n \n 2D x-position as seen from camera %i is %f" % (cameraIndex, x)
 *         print "\n 2D y-position is %f" % y             # <<<<<<<<<<<<<<
 *     else:
 *         print "Camera is not contributing to the 3D position of this marker"
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_2D_y_position_is_f, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":115
 *         print "\n 2D y-position is %f" % y
 *     else:
 *         print "Camera is not contributing to the 3D position of this marker"             # <<<<<<<<<<<<<<
 * 
 * def flush_camera_queues():
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Camera_is_not_contributing_to_th) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":108
 *     return TT_FrameTimeStamp()
 * 
 * def frame_camera_centroid(int index, int cameraIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """Returns true if the camera is contributing to this 3D marker.
 *        It also returns the location of the 2D centroid that is reconstructing to this 3D marker"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("native.frame_camera_centroid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":117
 *         print "Camera is not contributing to the 3D position of this marker"
 * 
 * def flush_camera_queues():             # <<<<<<<<<<<<<<
 *     """In the event that you are tracking a very high number of 2D and/or 3D markers (hundreds of 3D markers),
 *     and you find that the data you're getting out has sufficient latency you can call TT_FlushCameraQueues()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_43flush_camera_queues(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_42flush_camera_queues[] = "In the event that you are tracking a very high number of 2D and/or 3D markers (hundreds of 3D markers),\n    and you find that the data you're getting out has sufficient latency you can call TT_FlushCameraQueues()\n    to catch up before calling TT_Update(). Ideally, after calling TT_FlushCameraQueues() you'll want to not\n    call it again until after TT_Update() returns 0";
static PyMethodDef __pyx_mdef_6native_43flush_camera_queues = {"flush_camera_queues", (PyCFunction)__pyx_pw_6native_43flush_camera_queues, METH_NOARGS, __pyx_doc_6native_42flush_camera_queues};
static PyObject *__pyx_pw_6native_43flush_camera_queues(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flush_camera_queues (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_42flush_camera_queues(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_42flush_camera_queues(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flush_camera_queues", 0);

  /* "native.pyx":122
 *     to catch up before calling TT_Update(). Ideally, after calling TT_FlushCameraQueues() you'll want to not
 *     call it again until after TT_Update() returns 0"""
 *     TT_FlushCameraQueues()             # <<<<<<<<<<<<<<
 *     print "Flushed"
 * 
 */
  TT_FlushCameraQueues();

  /* "native.pyx":123
 *     call it again until after TT_Update() returns 0"""
 *     TT_FlushCameraQueues()
 *     print "Flushed"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Flushed) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":117
 *         print "Camera is not contributing to the 3D position of this marker"
 * 
 * def flush_camera_queues():             # <<<<<<<<<<<<<<
 *     """In the event that you are tracking a very high number of 2D and/or 3D markers (hundreds of 3D markers),
 *     and you find that the data you're getting out has sufficient latency you can call TT_FlushCameraQueues()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.flush_camera_queues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":127
 * 
 * #RIGID BODY CONTROL
 * def set_rigid_body_user_data(int index, int ID):             # <<<<<<<<<<<<<<
 *     """Set RigidBodies User Data"""
 *     TT_SetRigidBodyUserData(index,ID)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_45set_rigid_body_user_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_44set_rigid_body_user_data[] = "Set RigidBodies User Data";
static PyMethodDef __pyx_mdef_6native_45set_rigid_body_user_data = {"set_rigid_body_user_data", (PyCFunction)__pyx_pw_6native_45set_rigid_body_user_data, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_44set_rigid_body_user_data};
static PyObject *__pyx_pw_6native_45set_rigid_body_user_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  int __pyx_v_ID;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rigid_body_user_data (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_ID,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ID)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rigid_body_user_data", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_rigid_body_user_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ID = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_ID == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_rigid_body_user_data", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_rigid_body_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_44set_rigid_body_user_data(__pyx_self, __pyx_v_index, __pyx_v_ID);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_44set_rigid_body_user_data(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, int __pyx_v_ID) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_rigid_body_user_data", 0);

  /* "native.pyx":129
 * def set_rigid_body_user_data(int index, int ID):
 *     """Set RigidBodies User Data"""
 *     TT_SetRigidBodyUserData(index,ID)             # <<<<<<<<<<<<<<
 *     print "Set"
 * 
 */
  TT_SetRigidBodyUserData(__pyx_v_index, __pyx_v_ID);

  /* "native.pyx":130
 *     """Set RigidBodies User Data"""
 *     TT_SetRigidBodyUserData(index,ID)
 *     print "Set"             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_user_data(int index):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":127
 * 
 * #RIGID BODY CONTROL
 * def set_rigid_body_user_data(int index, int ID):             # <<<<<<<<<<<<<<
 *     """Set RigidBodies User Data"""
 *     TT_SetRigidBodyUserData(index,ID)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_rigid_body_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":132
 *     print "Set"
 * 
 * def rigid_body_user_data(int index):             # <<<<<<<<<<<<<<
 *     """Get RigidBodies User Data"""
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_47rigid_body_user_data(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_46rigid_body_user_data[] = "Get RigidBodies User Data";
static PyMethodDef __pyx_mdef_6native_47rigid_body_user_data = {"rigid_body_user_data", (PyCFunction)__pyx_pw_6native_47rigid_body_user_data, METH_O, __pyx_doc_6native_46rigid_body_user_data};
static PyObject *__pyx_pw_6native_47rigid_body_user_data(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_user_data (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_46rigid_body_user_data(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_46rigid_body_user_data(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_user_data", 0);

  /* "native.pyx":134
 * def rigid_body_user_data(int index):
 *     """Get RigidBodies User Data"""
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_name(int index):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_RigidBodyUserData(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Rigid_body_ID_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "native.pyx":132
 *     print "Set"
 * 
 * def rigid_body_user_data(int index):             # <<<<<<<<<<<<<<
 *     """Get RigidBodies User Data"""
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("native.rigid_body_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":136
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 * 
 * def rigid_body_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns RigidBody Name"""
 *     print "%s" % TT_RigidBodyName(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_49rigid_body_name(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_48rigid_body_name[] = "Returns RigidBody Name";
static PyMethodDef __pyx_mdef_6native_49rigid_body_name = {"rigid_body_name", (PyCFunction)__pyx_pw_6native_49rigid_body_name, METH_O, __pyx_doc_6native_48rigid_body_name};
static PyObject *__pyx_pw_6native_49rigid_body_name(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_name (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_48rigid_body_name(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_48rigid_body_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_name", 0);

  /* "native.pyx":138
 * def rigid_body_name(int index):
 *     """Returns RigidBody Name"""
 *     print "%s" % TT_RigidBodyName(index)             # <<<<<<<<<<<<<<
 * 
 * def set_rigid_body_enabled(int index, bool enabled):
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(TT_RigidBodyName(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "native.pyx":136
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 * 
 * def rigid_body_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns RigidBody Name"""
 *     print "%s" % TT_RigidBodyName(index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("native.rigid_body_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":140
 *     print "%s" % TT_RigidBodyName(index)
 * 
 * def set_rigid_body_enabled(int index, bool enabled):             # <<<<<<<<<<<<<<
 *     """Set tracking """
 *     TT_SetRigidBodyEnabled(index, enabled)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_51set_rigid_body_enabled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_50set_rigid_body_enabled[] = "Set tracking ";
static PyMethodDef __pyx_mdef_6native_51set_rigid_body_enabled = {"set_rigid_body_enabled", (PyCFunction)__pyx_pw_6native_51set_rigid_body_enabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_50set_rigid_body_enabled};
static PyObject *__pyx_pw_6native_51set_rigid_body_enabled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  bool __pyx_v_enabled;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rigid_body_enabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_enabled,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enabled)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rigid_body_enabled", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_rigid_body_enabled") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enabled == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_rigid_body_enabled", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_rigid_body_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_50set_rigid_body_enabled(__pyx_self, __pyx_v_index, __pyx_v_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_50set_rigid_body_enabled(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rigid_body_enabled", 0);

  /* "native.pyx":142
 * def set_rigid_body_enabled(int index, bool enabled):
 *     """Set tracking """
 *     TT_SetRigidBodyEnabled(index, enabled)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_enabled(int index):
 */
  TT_SetRigidBodyEnabled(__pyx_v_index, __pyx_v_enabled);

  /* "native.pyx":140
 *     print "%s" % TT_RigidBodyName(index)
 * 
 * def set_rigid_body_enabled(int index, bool enabled):             # <<<<<<<<<<<<<<
 *     """Set tracking """
 *     TT_SetRigidBodyEnabled(index, enabled)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":144
 *     TT_SetRigidBodyEnabled(index, enabled)
 * 
 * def rigid_body_enabled(int index):             # <<<<<<<<<<<<<<
 *     """Get tracking"""
 *     return TT_RigidBodyEnabled(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_53rigid_body_enabled(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_52rigid_body_enabled[] = "Get tracking";
static PyMethodDef __pyx_mdef_6native_53rigid_body_enabled = {"rigid_body_enabled", (PyCFunction)__pyx_pw_6native_53rigid_body_enabled, METH_O, __pyx_doc_6native_52rigid_body_enabled};
static PyObject *__pyx_pw_6native_53rigid_body_enabled(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_enabled (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_52rigid_body_enabled(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_52rigid_body_enabled(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_enabled", 0);

  /* "native.pyx":146
 * def rigid_body_enabled(int index):
 *     """Get tracking"""
 *     return TT_RigidBodyEnabled(index)             # <<<<<<<<<<<<<<
 * 
 * def is_rigid_body_tracked(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(TT_RigidBodyEnabled(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":144
 *     TT_SetRigidBodyEnabled(index, enabled)
 * 
 * def rigid_body_enabled(int index):             # <<<<<<<<<<<<<<
 *     """Get tracking"""
 *     return TT_RigidBodyEnabled(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.rigid_body_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":148
 *     return TT_RigidBodyEnabled(index)
 * 
 * def is_rigid_body_tracked(int index):             # <<<<<<<<<<<<<<
 *     """Is rigid body currently tracked"""
 *     if TT_IsRigidBodyTracked(index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_55is_rigid_body_tracked(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_54is_rigid_body_tracked[] = "Is rigid body currently tracked";
static PyMethodDef __pyx_mdef_6native_55is_rigid_body_tracked = {"is_rigid_body_tracked", (PyCFunction)__pyx_pw_6native_55is_rigid_body_tracked, METH_O, __pyx_doc_6native_54is_rigid_body_tracked};
static PyObject *__pyx_pw_6native_55is_rigid_body_tracked(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_rigid_body_tracked (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.is_rigid_body_tracked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_54is_rigid_body_tracked(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_54is_rigid_body_tracked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_rigid_body_tracked", 0);

  /* "native.pyx":150
 * def is_rigid_body_tracked(int index):
 *     """Is rigid body currently tracked"""
 *     if TT_IsRigidBodyTracked(index):             # <<<<<<<<<<<<<<
 *         print "Yes"
 *     else:
 */
  __pyx_t_1 = (TT_IsRigidBodyTracked(__pyx_v_index) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":151
 *     """Is rigid body currently tracked"""
 *     if TT_IsRigidBodyTracked(index):
 *         print "Yes"             # <<<<<<<<<<<<<<
 *     else:
 *         print "No"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Yes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":153
 *         print "Yes"
 *     else:
 *         print "No"             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_location(int index, float x, float y, float z,
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_No) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":148
 *     return TT_RigidBodyEnabled(index)
 * 
 * def is_rigid_body_tracked(int index):             # <<<<<<<<<<<<<<
 *     """Is rigid body currently tracked"""
 *     if TT_IsRigidBodyTracked(index):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.is_rigid_body_tracked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":155
 *         print "No"
 * 
 * def rigid_body_location(int index, float x, float y, float z,             # <<<<<<<<<<<<<<
 *                         float qx, float qy, float qz, float qw,
 *                         float yaw, float pitch, float roll):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_57rigid_body_location(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_56rigid_body_location[] = "##Not sure if this function sets or gets the location.\n    If it returns values different from the ones you entered,\n    the function gets the location as computed by Motive.\n    Otherwise it is for manually setting the location.\n    Update: So far this function only returns nonsense values.\n            Maybe I have to initialize the variables in the function as c variables\n            so that correct addresses are given to the function...";
static PyMethodDef __pyx_mdef_6native_57rigid_body_location = {"rigid_body_location", (PyCFunction)__pyx_pw_6native_57rigid_body_location, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_56rigid_body_location};
static PyObject *__pyx_pw_6native_57rigid_body_location(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  float __pyx_v_qx;
  float __pyx_v_qy;
  float __pyx_v_qz;
  float __pyx_v_qw;
  float __pyx_v_yaw;
  float __pyx_v_pitch;
  float __pyx_v_roll;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_location (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,&__pyx_n_s_qx,&__pyx_n_s_qy,&__pyx_n_s_qz,&__pyx_n_s_qw,&__pyx_n_s_yaw,&__pyx_n_s_pitch,&__pyx_n_s_roll,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qw)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yaw)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pitch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_roll)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rigid_body_location") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_z = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_z == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qx = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_qx == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qy = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_qy == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qz = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_qz == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qw = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_qw == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_yaw = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_yaw == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pitch = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_pitch == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_roll = __pyx_PyFloat_AsFloat(values[10]); if (unlikely((__pyx_v_roll == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rigid_body_location", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_56rigid_body_location(__pyx_self, __pyx_v_index, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_qx, __pyx_v_qy, __pyx_v_qz, __pyx_v_qw, __pyx_v_yaw, __pyx_v_pitch, __pyx_v_roll);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_56rigid_body_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z, float __pyx_v_qx, float __pyx_v_qy, float __pyx_v_qz, float __pyx_v_qw, float __pyx_v_yaw, float __pyx_v_pitch, float __pyx_v_roll) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_location", 0);

  /* "native.pyx":165
 *             Maybe I have to initialize the variables in the function as c variables
 *             so that correct addresses are given to the function..."""
 *     TT_RigidBodyLocation(index,  &x, &y, &z,  &qx, &qy, &qz, &qw, &yaw, &pitch, &roll)             # <<<<<<<<<<<<<<
 *     print "The position of rigid body %i is x=%f, y=%f, z=%f. \n" % (index, x, y, z)
 *     print "Orientation in quaternions is qx=%f, qy=%f, qz=%f, qw=%f. \n" % (qx, qy, qz, qw)
 */
  TT_RigidBodyLocation(__pyx_v_index, (&__pyx_v_x), (&__pyx_v_y), (&__pyx_v_z), (&__pyx_v_qx), (&__pyx_v_qy), (&__pyx_v_qz), (&__pyx_v_qw), (&__pyx_v_yaw), (&__pyx_v_pitch), (&__pyx_v_roll));

  /* "native.pyx":166
 *             so that correct addresses are given to the function..."""
 *     TT_RigidBodyLocation(index,  &x, &y, &z,  &qx, &qy, &qz, &qw, &yaw, &pitch, &roll)
 *     print "The position of rigid body %i is x=%f, y=%f, z=%f. \n" % (index, x, y, z)             # <<<<<<<<<<<<<<
 *     print "Orientation in quaternions is qx=%f, qy=%f, qz=%f, qw=%f. \n" % (qx, qy, qz, qw)
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_The_position_of_rigid_body_i_is, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "native.pyx":167
 *     TT_RigidBodyLocation(index,  &x, &y, &z,  &qx, &qy, &qz, &qw, &yaw, &pitch, &roll)
 *     print "The position of rigid body %i is x=%f, y=%f, z=%f. \n" % (index, x, y, z)
 *     print "Orientation in quaternions is qx=%f, qy=%f, qz=%f, qw=%f. \n" % (qx, qy, qz, qw)             # <<<<<<<<<<<<<<
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_qx); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_qy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_qz); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_qw); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Orientation_in_quaternions_is_qx, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "native.pyx":168
 *     print "The position of rigid body %i is x=%f, y=%f, z=%f. \n" % (index, x, y, z)
 *     print "Orientation in quaternions is qx=%f, qy=%f, qz=%f, qw=%f. \n" % (qx, qy, qz, qw)
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_translate_pivot(int index, float x, float y, float z):
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_yaw); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_pitch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_roll); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Yaw_is_f_pitch_is_f_roll_is_f, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "native.pyx":155
 *         print "No"
 * 
 * def rigid_body_location(int index, float x, float y, float z,             # <<<<<<<<<<<<<<
 *                         float qx, float qy, float qz, float qw,
 *                         float yaw, float pitch, float roll):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("native.rigid_body_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":170
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)
 * 
 * def rigid_body_translate_pivot(int index, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Rigid Body Pivot-Point Translation: Sets a translation offset for the centroid of the rigid body.
 *     Reported values for the location of the rigid body, as well as the 3D visualization, will be shifted
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_59rigid_body_translate_pivot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_58rigid_body_translate_pivot[] = "Rigid Body Pivot-Point Translation: Sets a translation offset for the centroid of the rigid body.\n    Reported values for the location of the rigid body, as well as the 3D visualization, will be shifted\n    by the amount provided in the fields on either the X, Y, or Z axis. Values are entered in meters. ";
static PyMethodDef __pyx_mdef_6native_59rigid_body_translate_pivot = {"rigid_body_translate_pivot", (PyCFunction)__pyx_pw_6native_59rigid_body_translate_pivot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_58rigid_body_translate_pivot};
static PyObject *__pyx_pw_6native_59rigid_body_translate_pivot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_translate_pivot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_translate_pivot", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_translate_pivot", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_translate_pivot", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rigid_body_translate_pivot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_z = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_z == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rigid_body_translate_pivot", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_translate_pivot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_58rigid_body_translate_pivot(__pyx_self, __pyx_v_index, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_58rigid_body_translate_pivot(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_translate_pivot", 0);

  /* "native.pyx":174
 *     Reported values for the location of the rigid body, as well as the 3D visualization, will be shifted
 *     by the amount provided in the fields on either the X, Y, or Z axis. Values are entered in meters. """
 *     return   TT_RigidBodyTranslatePivot(index, x, y, z)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_reset_orientation(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_RigidBodyTranslatePivot(__pyx_v_index, __pyx_v_x, __pyx_v_y, __pyx_v_z)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":170
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)
 * 
 * def rigid_body_translate_pivot(int index, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Rigid Body Pivot-Point Translation: Sets a translation offset for the centroid of the rigid body.
 *     Reported values for the location of the rigid body, as well as the 3D visualization, will be shifted
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.rigid_body_translate_pivot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":176
 *     return   TT_RigidBodyTranslatePivot(index, x, y, z)
 * 
 * def rigid_body_reset_orientation(int index):             # <<<<<<<<<<<<<<
 *     """Reset orientation to match the current tracked orientation
 *     of the rigid body"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_61rigid_body_reset_orientation(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_60rigid_body_reset_orientation[] = "Reset orientation to match the current tracked orientation\n    of the rigid body";
static PyMethodDef __pyx_mdef_6native_61rigid_body_reset_orientation = {"rigid_body_reset_orientation", (PyCFunction)__pyx_pw_6native_61rigid_body_reset_orientation, METH_O, __pyx_doc_6native_60rigid_body_reset_orientation};
static PyObject *__pyx_pw_6native_61rigid_body_reset_orientation(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_reset_orientation (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_reset_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_60rigid_body_reset_orientation(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_60rigid_body_reset_orientation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_reset_orientation", 0);

  /* "native.pyx":179
 *     """Reset orientation to match the current tracked orientation
 *     of the rigid body"""
 *     TT_RigidBodyResetOrientation(index)             # <<<<<<<<<<<<<<
 * 
 * def clear_rigid_body_list():
 */
  TT_RigidBodyResetOrientation(__pyx_v_index);

  /* "native.pyx":176
 *     return   TT_RigidBodyTranslatePivot(index, x, y, z)
 * 
 * def rigid_body_reset_orientation(int index):             # <<<<<<<<<<<<<<
 *     """Reset orientation to match the current tracked orientation
 *     of the rigid body"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":181
 *     TT_RigidBodyResetOrientation(index)
 * 
 * def clear_rigid_body_list():             # <<<<<<<<<<<<<<
 *     """Clear all rigid bodies"""
 *     TT_ClearRigidBodyList()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_63clear_rigid_body_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_62clear_rigid_body_list[] = "Clear all rigid bodies";
static PyMethodDef __pyx_mdef_6native_63clear_rigid_body_list = {"clear_rigid_body_list", (PyCFunction)__pyx_pw_6native_63clear_rigid_body_list, METH_NOARGS, __pyx_doc_6native_62clear_rigid_body_list};
static PyObject *__pyx_pw_6native_63clear_rigid_body_list(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_rigid_body_list (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_62clear_rigid_body_list(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_62clear_rigid_body_list(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_rigid_body_list", 0);

  /* "native.pyx":183
 * def clear_rigid_body_list():
 *     """Clear all rigid bodies"""
 *     TT_ClearRigidBodyList()             # <<<<<<<<<<<<<<
 *     print "Cleared"
 * 
 */
  TT_ClearRigidBodyList();

  /* "native.pyx":184
 *     """Clear all rigid bodies"""
 *     TT_ClearRigidBodyList()
 *     print "Cleared"             # <<<<<<<<<<<<<<
 * 
 * def remove_rigid_body(int index):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Cleared) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":181
 *     TT_RigidBodyResetOrientation(index)
 * 
 * def clear_rigid_body_list():             # <<<<<<<<<<<<<<
 *     """Clear all rigid bodies"""
 *     TT_ClearRigidBodyList()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.clear_rigid_body_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":186
 *     print "Cleared"
 * 
 * def remove_rigid_body(int index):             # <<<<<<<<<<<<<<
 *     """Remove single rigid body"""
 *     return TT_RemoveRigidBody(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_65remove_rigid_body(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_64remove_rigid_body[] = "Remove single rigid body";
static PyMethodDef __pyx_mdef_6native_65remove_rigid_body = {"remove_rigid_body", (PyCFunction)__pyx_pw_6native_65remove_rigid_body, METH_O, __pyx_doc_6native_64remove_rigid_body};
static PyObject *__pyx_pw_6native_65remove_rigid_body(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_rigid_body (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.remove_rigid_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_64remove_rigid_body(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_64remove_rigid_body(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_rigid_body", 0);

  /* "native.pyx":188
 * def remove_rigid_body(int index):
 *     """Remove single rigid body"""
 *     return TT_RemoveRigidBody(index)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_marker_count(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_RemoveRigidBody(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":186
 *     print "Cleared"
 * 
 * def remove_rigid_body(int index):             # <<<<<<<<<<<<<<
 *     """Remove single rigid body"""
 *     return TT_RemoveRigidBody(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.remove_rigid_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":190
 *     return TT_RemoveRigidBody(index)
 * 
 * def rigid_body_marker_count(int index):             # <<<<<<<<<<<<<<
 *     """Get marker count"""
 *     return TT_RigidBodyMarkerCount(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_67rigid_body_marker_count(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_66rigid_body_marker_count[] = "Get marker count";
static PyMethodDef __pyx_mdef_6native_67rigid_body_marker_count = {"rigid_body_marker_count", (PyCFunction)__pyx_pw_6native_67rigid_body_marker_count, METH_O, __pyx_doc_6native_66rigid_body_marker_count};
static PyObject *__pyx_pw_6native_67rigid_body_marker_count(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_marker_count (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_marker_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_66rigid_body_marker_count(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_66rigid_body_marker_count(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_marker_count", 0);

  /* "native.pyx":192
 * def rigid_body_marker_count(int index):
 *     """Get marker count"""
 *     return TT_RigidBodyMarkerCount(index)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_marker(int rigidIndex, int markerIndex, float x, float y, float z):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_RigidBodyMarkerCount(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":190
 *     return TT_RemoveRigidBody(index)
 * 
 * def rigid_body_marker_count(int index):             # <<<<<<<<<<<<<<
 *     """Get marker count"""
 *     return TT_RigidBodyMarkerCount(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.rigid_body_marker_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":194
 *     return TT_RigidBodyMarkerCount(index)
 * 
 * def rigid_body_marker(int rigidIndex, int markerIndex, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Get rigid body marker.
 *     ##Not sure if this function sets or gets the location.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_69rigid_body_marker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_68rigid_body_marker[] = "Get rigid body marker.\n    ##Not sure if this function sets or gets the location.\n    If it returns values different from the ones you entered,\n    the function gets the location as computed by Motive.\n    Otherwise it is for manually setting the location.\n    Update: If the function only returns gibberish, see rigid body location.";
static PyMethodDef __pyx_mdef_6native_69rigid_body_marker = {"rigid_body_marker", (PyCFunction)__pyx_pw_6native_69rigid_body_marker, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_68rigid_body_marker};
static PyObject *__pyx_pw_6native_69rigid_body_marker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_rigidIndex;
  int __pyx_v_markerIndex;
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_marker (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rigidIndex,&__pyx_n_s_markerIndex,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rigidIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_markerIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_marker", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_marker", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_marker", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_marker", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rigid_body_marker") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_rigidIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_rigidIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_markerIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_markerIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_z = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_z == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rigid_body_marker", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_marker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_68rigid_body_marker(__pyx_self, __pyx_v_rigidIndex, __pyx_v_markerIndex, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_68rigid_body_marker(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_rigidIndex, int __pyx_v_markerIndex, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_marker", 0);

  /* "native.pyx":201
 *     Otherwise it is for manually setting the location.
 *     Update: If the function only returns gibberish, see rigid body location."""
 *     TT_RigidBodyMarker(rigidIndex, markerIndex, &x, &y, &z)             # <<<<<<<<<<<<<<
 *     print "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n" % (rigidIndex, markerIndex, x, y, z)
 * 
 */
  TT_RigidBodyMarker(__pyx_v_rigidIndex, __pyx_v_markerIndex, (&__pyx_v_x), (&__pyx_v_y), (&__pyx_v_z));

  /* "native.pyx":202
 *     Update: If the function only returns gibberish, see rigid body location."""
 *     TT_RigidBodyMarker(rigidIndex, markerIndex, &x, &y, &z)
 *     print "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n" % (rigidIndex, markerIndex, x, y, z)             # <<<<<<<<<<<<<<
 * 
 * def rigid_body_point_cloud_marker(int rigidIndex, int markerIndex, bool tracked, float x, float y, float z):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_rigidIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_markerIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_The_position_of_rigid_body_s_i_m, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "native.pyx":194
 *     return TT_RigidBodyMarkerCount(index)
 * 
 * def rigid_body_marker(int rigidIndex, int markerIndex, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Get rigid body marker.
 *     ##Not sure if this function sets or gets the location.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("native.rigid_body_marker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":204
 *     print "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n" % (rigidIndex, markerIndex, x, y, z)
 * 
 * def rigid_body_point_cloud_marker(int rigidIndex, int markerIndex, bool tracked, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """ Get corresponding point cloud marker
 *     If tracked is false, there is no corresponding point cloud marker.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_71rigid_body_point_cloud_marker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_70rigid_body_point_cloud_marker[] = " Get corresponding point cloud marker\n    If tracked is false, there is no corresponding point cloud marker.\n    ";
static PyMethodDef __pyx_mdef_6native_71rigid_body_point_cloud_marker = {"rigid_body_point_cloud_marker", (PyCFunction)__pyx_pw_6native_71rigid_body_point_cloud_marker, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_70rigid_body_point_cloud_marker};
static PyObject *__pyx_pw_6native_71rigid_body_point_cloud_marker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_rigidIndex;
  int __pyx_v_markerIndex;
  bool __pyx_v_tracked;
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rigid_body_point_cloud_marker (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rigidIndex,&__pyx_n_s_markerIndex,&__pyx_n_s_tracked,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rigidIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_markerIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_point_cloud_marker", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tracked)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_point_cloud_marker", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_point_cloud_marker", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_point_cloud_marker", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rigid_body_point_cloud_marker", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rigid_body_point_cloud_marker") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_rigidIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_rigidIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_markerIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_markerIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_tracked = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_tracked == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_z = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_z == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rigid_body_point_cloud_marker", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.rigid_body_point_cloud_marker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_70rigid_body_point_cloud_marker(__pyx_self, __pyx_v_rigidIndex, __pyx_v_markerIndex, __pyx_v_tracked, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_70rigid_body_point_cloud_marker(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_rigidIndex, int __pyx_v_markerIndex, bool __pyx_v_tracked, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rigid_body_point_cloud_marker", 0);

  /* "native.pyx":208
 *     If tracked is false, there is no corresponding point cloud marker.
 *     """
 *     TT_RigidBodyPointCloudMarker(rigidIndex, markerIndex, tracked, x, y, z)             # <<<<<<<<<<<<<<
 *     if tracked:
 *         print "The point cloud markers position is x=%f, y=%f, z=%f" % (x,y,z)
 */
  TT_RigidBodyPointCloudMarker(__pyx_v_rigidIndex, __pyx_v_markerIndex, __pyx_v_tracked, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "native.pyx":209
 *     """
 *     TT_RigidBodyPointCloudMarker(rigidIndex, markerIndex, tracked, x, y, z)
 *     if tracked:             # <<<<<<<<<<<<<<
 *         print "The point cloud markers position is x=%f, y=%f, z=%f" % (x,y,z)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_tracked != 0);
  if (__pyx_t_1) {

    /* "native.pyx":210
 *     TT_RigidBodyPointCloudMarker(rigidIndex, markerIndex, tracked, x, y, z)
 *     if tracked:
 *         print "The point cloud markers position is x=%f, y=%f, z=%f" % (x,y,z)             # <<<<<<<<<<<<<<
 *     else:
 *         print "There is no corresponding point cloud marker"
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_The_point_cloud_markers_position, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":212
 *         print "The point cloud markers position is x=%f, y=%f, z=%f" % (x,y,z)
 *     else:
 *         print "There is no corresponding point cloud marker"             # <<<<<<<<<<<<<<
 * 
 * def create_rigid_body(str name, int id, int markerCount, markerList):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_There_is_no_corresponding_point) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":204
 *     print "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n" % (rigidIndex, markerIndex, x, y, z)
 * 
 * def rigid_body_point_cloud_marker(int rigidIndex, int markerIndex, bool tracked, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """ Get corresponding point cloud marker
 *     If tracked is false, there is no corresponding point cloud marker.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("native.rigid_body_point_cloud_marker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":214
 *         print "There is no corresponding point cloud marker"
 * 
 * def create_rigid_body(str name, int id, int markerCount, markerList):             # <<<<<<<<<<<<<<
 *     """Create a rigid body based on the marker count and marker list provided.
 *     The marker list is expected to contain a list of marker coordinates in the order:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_73create_rigid_body(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_72create_rigid_body[] = "Create a rigid body based on the marker count and marker list provided.\n    The marker list is expected to contain a list of marker coordinates in the order:\n    x1,y1,z1,x2,y2,z2,...xN,yN,zN.";
static PyMethodDef __pyx_mdef_6native_73create_rigid_body = {"create_rigid_body", (PyCFunction)__pyx_pw_6native_73create_rigid_body, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_72create_rigid_body};
static PyObject *__pyx_pw_6native_73create_rigid_body(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_v_id;
  int __pyx_v_markerCount;
  PyObject *__pyx_v_markerList = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_rigid_body (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_id,&__pyx_n_s_markerCount,&__pyx_n_s_markerList,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_rigid_body", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_markerCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_rigid_body", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_markerList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_rigid_body", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_rigid_body") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_id = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_markerCount = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_markerCount == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_markerList = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_rigid_body", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.create_rigid_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6native_72create_rigid_body(__pyx_self, __pyx_v_name, __pyx_v_id, __pyx_v_markerCount, __pyx_v_markerList);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_72create_rigid_body(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, int __pyx_v_id, int __pyx_v_markerCount, PyObject *__pyx_v_markerList) {
  float __pyx_v_markerListp[1000];
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  char const *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_rigid_body", 0);

  /* "native.pyx":219
 *     x1,y1,z1,x2,y2,z2,...xN,yN,zN."""
 *     cdef float markerListp[1000]
 *     assert len(markerList)<=1000, "Due to need of const C array size, markerList max items=1000. \n Please resize const in native.pyx"             # <<<<<<<<<<<<<<
 *     for i in range(0,len(markerList)):
 *         markerListp[i]=markerList[i]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_Length(__pyx_v_markerList); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(!((__pyx_t_1 <= 1000) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Due_to_need_of_const_C_array_siz);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":220
 *     cdef float markerListp[1000]
 *     assert len(markerList)<=1000, "Due to need of const C array size, markerList max items=1000. \n Please resize const in native.pyx"
 *     for i in range(0,len(markerList)):             # <<<<<<<<<<<<<<
 *         markerListp[i]=markerList[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_markerList); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "native.pyx":221
 *     assert len(markerList)<=1000, "Due to need of const C array size, markerList max items=1000. \n Please resize const in native.pyx"
 *     for i in range(0,len(markerList)):
 *         markerListp[i]=markerList[i]             # <<<<<<<<<<<<<<
 * 
 *     return TT_CreateRigidBody(name, id, markerCount, markerListp)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_markerList, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_markerListp[__pyx_v_i]) = __pyx_t_4;
  }

  /* "native.pyx":223
 *         markerListp[i]=markerList[i]
 * 
 *     return TT_CreateRigidBody(name, id, markerCount, markerListp)             # <<<<<<<<<<<<<<
 * 
 * def software_build():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_int(TT_CreateRigidBody(__pyx_t_5, __pyx_v_id, __pyx_v_markerCount, __pyx_v_markerListp)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "native.pyx":214
 *         print "There is no corresponding point cloud marker"
 * 
 * def create_rigid_body(str name, int id, int markerCount, markerList):             # <<<<<<<<<<<<<<
 *     """Create a rigid body based on the marker count and marker list provided.
 *     The marker list is expected to contain a list of marker coordinates in the order:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("native.create_rigid_body", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":225
 *     return TT_CreateRigidBody(name, id, markerCount, markerListp)
 * 
 * def software_build():             # <<<<<<<<<<<<<<
 *     """Software Release Build"""
 *     return TT_BuildNumber()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_75software_build(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_74software_build[] = "Software Release Build";
static PyMethodDef __pyx_mdef_6native_75software_build = {"software_build", (PyCFunction)__pyx_pw_6native_75software_build, METH_NOARGS, __pyx_doc_6native_74software_build};
static PyObject *__pyx_pw_6native_75software_build(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("software_build (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_74software_build(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_74software_build(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("software_build", 0);

  /* "native.pyx":227
 * def software_build():
 *     """Software Release Build"""
 *     return TT_BuildNumber()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_BuildNumber()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":225
 *     return TT_CreateRigidBody(name, id, markerCount, markerListp)
 * 
 * def software_build():             # <<<<<<<<<<<<<<
 *     """Software Release Build"""
 *     return TT_BuildNumber()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.software_build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":231
 * 
 * #CAMERA GROUP SUPPORT
 * def camera_group_count():             # <<<<<<<<<<<<<<
 *     """Returns number of camera groups"""
 *     return TT_CameraGroupCount()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_77camera_group_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_76camera_group_count[] = "Returns number of camera groups";
static PyMethodDef __pyx_mdef_6native_77camera_group_count = {"camera_group_count", (PyCFunction)__pyx_pw_6native_77camera_group_count, METH_NOARGS, __pyx_doc_6native_76camera_group_count};
static PyObject *__pyx_pw_6native_77camera_group_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_group_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_76camera_group_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_76camera_group_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_group_count", 0);

  /* "native.pyx":233
 * def camera_group_count():
 *     """Returns number of camera groups"""
 *     return TT_CameraGroupCount()             # <<<<<<<<<<<<<<
 * 
 * def create_camera_group():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraGroupCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":231
 * 
 * #CAMERA GROUP SUPPORT
 * def camera_group_count():             # <<<<<<<<<<<<<<
 *     """Returns number of camera groups"""
 *     return TT_CameraGroupCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_group_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":235
 *     return TT_CameraGroupCount()
 * 
 * def create_camera_group():             # <<<<<<<<<<<<<<
 *     """Add an additional group"""
 *     if TT_CreateCameraGroup():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_79create_camera_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_78create_camera_group[] = "Add an additional group";
static PyMethodDef __pyx_mdef_6native_79create_camera_group = {"create_camera_group", (PyCFunction)__pyx_pw_6native_79create_camera_group, METH_NOARGS, __pyx_doc_6native_78create_camera_group};
static PyObject *__pyx_pw_6native_79create_camera_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_camera_group (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_78create_camera_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_78create_camera_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_camera_group", 0);

  /* "native.pyx":237
 * def create_camera_group():
 *     """Add an additional group"""
 *     if TT_CreateCameraGroup():             # <<<<<<<<<<<<<<
 *         print "True"
 *     else:
 */
  __pyx_t_1 = (TT_CreateCameraGroup() != 0);
  if (__pyx_t_1) {

    /* "native.pyx":238
 *     """Add an additional group"""
 *     if TT_CreateCameraGroup():
 *         print "True"             # <<<<<<<<<<<<<<
 *     else:
 *         print "False"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":240
 *         print "True"
 *     else:
 *         print "False"             # <<<<<<<<<<<<<<
 * 
 * def remove_camera_group(int index):
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":235
 *     return TT_CameraGroupCount()
 * 
 * def create_camera_group():             # <<<<<<<<<<<<<<
 *     """Add an additional group"""
 *     if TT_CreateCameraGroup():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.create_camera_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":242
 *         print "False"
 * 
 * def remove_camera_group(int index):             # <<<<<<<<<<<<<<
 *     """Remove a camera group (must be empty)"""
 *     if TT_RemoveCameraGroup(index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_81remove_camera_group(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_80remove_camera_group[] = "Remove a camera group (must be empty)";
static PyMethodDef __pyx_mdef_6native_81remove_camera_group = {"remove_camera_group", (PyCFunction)__pyx_pw_6native_81remove_camera_group, METH_O, __pyx_doc_6native_80remove_camera_group};
static PyObject *__pyx_pw_6native_81remove_camera_group(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_camera_group (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.remove_camera_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_80remove_camera_group(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_80remove_camera_group(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_camera_group", 0);

  /* "native.pyx":244
 * def remove_camera_group(int index):
 *     """Remove a camera group (must be empty)"""
 *     if TT_RemoveCameraGroup(index):             # <<<<<<<<<<<<<<
 *         print "Removed"
 *     else:
 */
  __pyx_t_1 = (TT_RemoveCameraGroup(__pyx_v_index) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":245
 *     """Remove a camera group (must be empty)"""
 *     if TT_RemoveCameraGroup(index):
 *         print "Removed"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error, could not remove. Check if group is empty"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Removed) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":247
 *         print "Removed"
 *     else:
 *         print "Error, could not remove. Check if group is empty"             # <<<<<<<<<<<<<<
 * 
 * def cameras_group(int index):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_could_not_remove_Check_if) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":242
 *         print "False"
 * 
 * def remove_camera_group(int index):             # <<<<<<<<<<<<<<
 *     """Remove a camera group (must be empty)"""
 *     if TT_RemoveCameraGroup(index):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.remove_camera_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":249
 *         print "Error, could not remove. Check if group is empty"
 * 
 * def cameras_group(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's camera group index"""
 *     return TT_CamerasGroup(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_83cameras_group(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_82cameras_group[] = "Returns Camera's camera group index";
static PyMethodDef __pyx_mdef_6native_83cameras_group = {"cameras_group", (PyCFunction)__pyx_pw_6native_83cameras_group, METH_O, __pyx_doc_6native_82cameras_group};
static PyObject *__pyx_pw_6native_83cameras_group(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cameras_group (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.cameras_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_82cameras_group(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_82cameras_group(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cameras_group", 0);

  /* "native.pyx":251
 * def cameras_group(int index):
 *     """Returns Camera's camera group index"""
 *     return TT_CamerasGroup(index)             # <<<<<<<<<<<<<<
 * 
 * def set_group_shutter_delay(int groupIndex, int microseconds):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CamerasGroup(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":249
 *         print "Error, could not remove. Check if group is empty"
 * 
 * def cameras_group(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's camera group index"""
 *     return TT_CamerasGroup(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.cameras_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":253
 *     return TT_CamerasGroup(index)
 * 
 * def set_group_shutter_delay(int groupIndex, int microseconds):             # <<<<<<<<<<<<<<
 *     """Set camera group's shutter delay"""
 *     TT_SetGroupShutterDelay(groupIndex, microseconds)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_85set_group_shutter_delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_84set_group_shutter_delay[] = "Set camera group's shutter delay";
static PyMethodDef __pyx_mdef_6native_85set_group_shutter_delay = {"set_group_shutter_delay", (PyCFunction)__pyx_pw_6native_85set_group_shutter_delay, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_84set_group_shutter_delay};
static PyObject *__pyx_pw_6native_85set_group_shutter_delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_groupIndex;
  int __pyx_v_microseconds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_group_shutter_delay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_groupIndex,&__pyx_n_s_microseconds,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_microseconds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_group_shutter_delay", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_group_shutter_delay") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_groupIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_groupIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_microseconds = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_microseconds == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_group_shutter_delay", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_group_shutter_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_84set_group_shutter_delay(__pyx_self, __pyx_v_groupIndex, __pyx_v_microseconds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_84set_group_shutter_delay(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_groupIndex, int __pyx_v_microseconds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_group_shutter_delay", 0);

  /* "native.pyx":255
 * def set_group_shutter_delay(int groupIndex, int microseconds):
 *     """Set camera group's shutter delay"""
 *     TT_SetGroupShutterDelay(groupIndex, microseconds)             # <<<<<<<<<<<<<<
 *     print "Set"
 * 
 */
  TT_SetGroupShutterDelay(__pyx_v_groupIndex, __pyx_v_microseconds);

  /* "native.pyx":256
 *     """Set camera group's shutter delay"""
 *     TT_SetGroupShutterDelay(groupIndex, microseconds)
 *     print "Set"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_group(int cameraIndex, int cameraGroupIndex):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":253
 *     return TT_CamerasGroup(index)
 * 
 * def set_group_shutter_delay(int groupIndex, int microseconds):             # <<<<<<<<<<<<<<
 *     """Set camera group's shutter delay"""
 *     TT_SetGroupShutterDelay(groupIndex, microseconds)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_group_shutter_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":258
 *     print "Set"
 * 
 * def set_camera_group(int cameraIndex, int cameraGroupIndex):             # <<<<<<<<<<<<<<
 *     """Move camera to camera group"""
 *     TT_SetCameraGroup(cameraIndex, cameraGroupIndex)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_87set_camera_group(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_86set_camera_group[] = "Move camera to camera group";
static PyMethodDef __pyx_mdef_6native_87set_camera_group = {"set_camera_group", (PyCFunction)__pyx_pw_6native_87set_camera_group, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_86set_camera_group};
static PyObject *__pyx_pw_6native_87set_camera_group(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_cameraGroupIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_group (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_cameraGroupIndex,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraGroupIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_group", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_group") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_cameraGroupIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_cameraGroupIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_group", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_86set_camera_group(__pyx_self, __pyx_v_cameraIndex, __pyx_v_cameraGroupIndex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_86set_camera_group(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_cameraGroupIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_group", 0);

  /* "native.pyx":260
 * def set_camera_group(int cameraIndex, int cameraGroupIndex):
 *     """Move camera to camera group"""
 *     TT_SetCameraGroup(cameraIndex, cameraGroupIndex)             # <<<<<<<<<<<<<<
 *     print "Set"
 * 
 */
  TT_SetCameraGroup(__pyx_v_cameraIndex, __pyx_v_cameraGroupIndex);

  /* "native.pyx":261
 *     """Move camera to camera group"""
 *     TT_SetCameraGroup(cameraIndex, cameraGroupIndex)
 *     print "Set"             # <<<<<<<<<<<<<<
 * 
 * #MARKER SIZE SETTINGS
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":258
 *     print "Set"
 * 
 * def set_camera_group(int cameraIndex, int cameraGroupIndex):             # <<<<<<<<<<<<<<
 *     """Move camera to camera group"""
 *     TT_SetCameraGroup(cameraIndex, cameraGroupIndex)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":264
 * 
 * #MARKER SIZE SETTINGS
 * def set_camera_group_reconstruction(int groupIndex, bool enable):             # <<<<<<<<<<<<<<
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_89set_camera_group_reconstruction(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_89set_camera_group_reconstruction = {"set_camera_group_reconstruction", (PyCFunction)__pyx_pw_6native_89set_camera_group_reconstruction, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_89set_camera_group_reconstruction(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_groupIndex;
  bool __pyx_v_enable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_group_reconstruction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_groupIndex,&__pyx_n_s_enable,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_group_reconstruction", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_group_reconstruction") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_groupIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_groupIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enable = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enable == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_group_reconstruction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_group_reconstruction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_88set_camera_group_reconstruction(__pyx_self, __pyx_v_groupIndex, __pyx_v_enable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_88set_camera_group_reconstruction(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_groupIndex, bool __pyx_v_enable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_group_reconstruction", 0);

  /* "native.pyx":265
 * #MARKER SIZE SETTINGS
 * def set_camera_group_reconstruction(int groupIndex, bool enable):
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)             # <<<<<<<<<<<<<<
 * 
 * def set_enabled_filterswitch(bool enabled):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_SetCameraGroupReconstruction(__pyx_v_groupIndex, __pyx_v_enable)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":264
 * 
 * #MARKER SIZE SETTINGS
 * def set_camera_group_reconstruction(int groupIndex, bool enable):             # <<<<<<<<<<<<<<
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.set_camera_group_reconstruction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":267
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 * def set_enabled_filterswitch(bool enabled):             # <<<<<<<<<<<<<<
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_91set_enabled_filterswitch(PyObject *__pyx_self, PyObject *__pyx_arg_enabled); /*proto*/
static PyMethodDef __pyx_mdef_6native_91set_enabled_filterswitch = {"set_enabled_filterswitch", (PyCFunction)__pyx_pw_6native_91set_enabled_filterswitch, METH_O, 0};
static PyObject *__pyx_pw_6native_91set_enabled_filterswitch(PyObject *__pyx_self, PyObject *__pyx_arg_enabled) {
  bool __pyx_v_enabled;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_enabled_filterswitch (wrapper)", 0);
  assert(__pyx_arg_enabled); {
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(__pyx_arg_enabled); if (unlikely((__pyx_v_enabled == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_enabled_filterswitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_90set_enabled_filterswitch(__pyx_self, ((bool)__pyx_v_enabled));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_90set_enabled_filterswitch(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_enabled_filterswitch", 0);

  /* "native.pyx":268
 * 
 * def set_enabled_filterswitch(bool enabled):
 *     return TT_SetEnabledFilterSwitch(enabled)             # <<<<<<<<<<<<<<
 * 
 * def is_filter_switch_enabled():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_SetEnabledFilterSwitch(__pyx_v_enabled)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":267
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 * def set_enabled_filterswitch(bool enabled):             # <<<<<<<<<<<<<<
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.set_enabled_filterswitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":270
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 * def is_filter_switch_enabled():             # <<<<<<<<<<<<<<
 *     if TT_IsFilterSwitchEnabled():
 *         print "True"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_93is_filter_switch_enabled(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6native_93is_filter_switch_enabled = {"is_filter_switch_enabled", (PyCFunction)__pyx_pw_6native_93is_filter_switch_enabled, METH_NOARGS, 0};
static PyObject *__pyx_pw_6native_93is_filter_switch_enabled(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_filter_switch_enabled (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_92is_filter_switch_enabled(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_92is_filter_switch_enabled(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_filter_switch_enabled", 0);

  /* "native.pyx":271
 * 
 * def is_filter_switch_enabled():
 *     if TT_IsFilterSwitchEnabled():             # <<<<<<<<<<<<<<
 *         print "True"
 *     else:
 */
  __pyx_t_1 = (TT_IsFilterSwitchEnabled() != 0);
  if (__pyx_t_1) {

    /* "native.pyx":272
 * def is_filter_switch_enabled():
 *     if TT_IsFilterSwitchEnabled():
 *         print "True"             # <<<<<<<<<<<<<<
 *     else:
 *         print "False"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":274
 *         print "True"
 *     else:
 *         print "False"             # <<<<<<<<<<<<<<
 * 
 * #POINT CLOUD INTERFACE
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":270
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 * def is_filter_switch_enabled():             # <<<<<<<<<<<<<<
 *     if TT_IsFilterSwitchEnabled():
 *         print "True"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.is_filter_switch_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":277
 * 
 * #POINT CLOUD INTERFACE
 * def camera_count():             # <<<<<<<<<<<<<<
 *     """Returns Camera Count"""
 *     return TT_CameraCount()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_95camera_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6native_94camera_count[] = "Returns Camera Count";
static PyMethodDef __pyx_mdef_6native_95camera_count = {"camera_count", (PyCFunction)__pyx_pw_6native_95camera_count, METH_NOARGS, __pyx_doc_6native_94camera_count};
static PyObject *__pyx_pw_6native_95camera_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_count (wrapper)", 0);
  __pyx_r = __pyx_pf_6native_94camera_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_94camera_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_count", 0);

  /* "native.pyx":279
 * def camera_count():
 *     """Returns Camera Count"""
 *     return TT_CameraCount()             # <<<<<<<<<<<<<<
 * 
 * def camera_x_location(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":277
 * 
 * #POINT CLOUD INTERFACE
 * def camera_count():             # <<<<<<<<<<<<<<
 *     """Returns Camera Count"""
 *     return TT_CameraCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":281
 *     return TT_CameraCount()
 * 
 * def camera_x_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's X Coord"""
 *     return TT_CameraXLocation(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_97camera_x_location(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_96camera_x_location[] = "Returns Camera's X Coord";
static PyMethodDef __pyx_mdef_6native_97camera_x_location = {"camera_x_location", (PyCFunction)__pyx_pw_6native_97camera_x_location, METH_O, __pyx_doc_6native_96camera_x_location};
static PyObject *__pyx_pw_6native_97camera_x_location(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_x_location (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_x_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_96camera_x_location(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_96camera_x_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_x_location", 0);

  /* "native.pyx":283
 * def camera_x_location(int index):
 *     """Returns Camera's X Coord"""
 *     return TT_CameraXLocation(index)             # <<<<<<<<<<<<<<
 * 
 * def camera_y_location(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_CameraXLocation(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":281
 *     return TT_CameraCount()
 * 
 * def camera_x_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's X Coord"""
 *     return TT_CameraXLocation(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_x_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":285
 *     return TT_CameraXLocation(index)
 * 
 * def camera_y_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Y Coord"""
 *     return TT_CameraYLocation(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_99camera_y_location(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_98camera_y_location[] = "Returns Camera's Y Coord";
static PyMethodDef __pyx_mdef_6native_99camera_y_location = {"camera_y_location", (PyCFunction)__pyx_pw_6native_99camera_y_location, METH_O, __pyx_doc_6native_98camera_y_location};
static PyObject *__pyx_pw_6native_99camera_y_location(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_y_location (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_y_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_98camera_y_location(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_98camera_y_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_y_location", 0);

  /* "native.pyx":287
 * def camera_y_location(int index):
 *     """Returns Camera's Y Coord"""
 *     return TT_CameraYLocation(index)             # <<<<<<<<<<<<<<
 * 
 * def camera_z_location(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_CameraYLocation(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":285
 *     return TT_CameraXLocation(index)
 * 
 * def camera_y_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Y Coord"""
 *     return TT_CameraYLocation(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_y_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":289
 *     return TT_CameraYLocation(index)
 * 
 * def camera_z_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Z Coord"""
 *     return TT_CameraZLocation(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_101camera_z_location(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_100camera_z_location[] = "Returns Camera's Z Coord";
static PyMethodDef __pyx_mdef_6native_101camera_z_location = {"camera_z_location", (PyCFunction)__pyx_pw_6native_101camera_z_location, METH_O, __pyx_doc_6native_100camera_z_location};
static PyObject *__pyx_pw_6native_101camera_z_location(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_z_location (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_z_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_100camera_z_location(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_100camera_z_location(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_z_location", 0);

  /* "native.pyx":291
 * def camera_z_location(int index):
 *     """Returns Camera's Z Coord"""
 *     return TT_CameraZLocation(index)             # <<<<<<<<<<<<<<
 * 
 * def camera_orientation_matrix(int camera, int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_CameraZLocation(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":289
 *     return TT_CameraYLocation(index)
 * 
 * def camera_z_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Z Coord"""
 *     return TT_CameraZLocation(index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_z_location", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":293
 *     return TT_CameraZLocation(index)
 * 
 * def camera_orientation_matrix(int camera, int index):             # <<<<<<<<<<<<<<
 *     """Orientation"""
 *     return TT_CameraOrientationMatrix(camera, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_103camera_orientation_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_102camera_orientation_matrix[] = "Orientation";
static PyMethodDef __pyx_mdef_6native_103camera_orientation_matrix = {"camera_orientation_matrix", (PyCFunction)__pyx_pw_6native_103camera_orientation_matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_102camera_orientation_matrix};
static PyObject *__pyx_pw_6native_103camera_orientation_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_camera;
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_orientation_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camera,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camera)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_orientation_matrix", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "camera_orientation_matrix") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_camera = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_camera == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("camera_orientation_matrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_orientation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_102camera_orientation_matrix(__pyx_self, __pyx_v_camera, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_102camera_orientation_matrix(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_camera, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_orientation_matrix", 0);

  /* "native.pyx":295
 * def camera_orientation_matrix(int camera, int index):
 *     """Orientation"""
 *     return TT_CameraOrientationMatrix(camera, index)             # <<<<<<<<<<<<<<
 * 
 * def camera_name(int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_CameraOrientationMatrix(__pyx_v_camera, __pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":293
 *     return TT_CameraZLocation(index)
 * 
 * def camera_orientation_matrix(int camera, int index):             # <<<<<<<<<<<<<<
 *     """Orientation"""
 *     return TT_CameraOrientationMatrix(camera, index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_orientation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":297
 *     return TT_CameraOrientationMatrix(camera, index)
 * 
 * def camera_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera Name"""
 *     print TT_CameraName(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_105camera_name(PyObject *__pyx_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_6native_104camera_name[] = "Returns Camera Name";
static PyMethodDef __pyx_mdef_6native_105camera_name = {"camera_name", (PyCFunction)__pyx_pw_6native_105camera_name, METH_O, __pyx_doc_6native_104camera_name};
static PyObject *__pyx_pw_6native_105camera_name(PyObject *__pyx_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_name (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_104camera_name(__pyx_self, ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_104camera_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_name", 0);

  /* "native.pyx":299
 * def camera_name(int index):
 *     """Returns Camera Name"""
 *     print TT_CameraName(index)             # <<<<<<<<<<<<<<
 * 
 * def camera_marker_count(int cameraIndex):
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(TT_CameraName(__pyx_v_index)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":297
 *     return TT_CameraOrientationMatrix(camera, index)
 * 
 * def camera_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera Name"""
 *     print TT_CameraName(index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":301
 *     print TT_CameraName(index)
 * 
 * def camera_marker_count(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """Camera's 2D Marker Count"""
 *     return TT_CameraMarkerCount(cameraIndex)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_107camera_marker_count(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static char __pyx_doc_6native_106camera_marker_count[] = "Camera's 2D Marker Count";
static PyMethodDef __pyx_mdef_6native_107camera_marker_count = {"camera_marker_count", (PyCFunction)__pyx_pw_6native_107camera_marker_count, METH_O, __pyx_doc_6native_106camera_marker_count};
static PyObject *__pyx_pw_6native_107camera_marker_count(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_marker_count (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_marker_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_106camera_marker_count(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_106camera_marker_count(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_marker_count", 0);

  /* "native.pyx":303
 * def camera_marker_count(int cameraIndex):
 *     """Camera's 2D Marker Count"""
 *     return TT_CameraMarkerCount(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_marker(int cameraIndex, int markerIndex, float x, float y):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraMarkerCount(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":301
 *     print TT_CameraName(index)
 * 
 * def camera_marker_count(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """Camera's 2D Marker Count"""
 *     return TT_CameraMarkerCount(cameraIndex)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_marker_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":305
 *     return TT_CameraMarkerCount(cameraIndex)
 * 
 * def camera_marker(int cameraIndex, int markerIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """CameraMarker fetches the 2D centroid location of the marker as seen by the camera"""
 *     if TT_CameraMarker(cameraIndex, markerIndex, x, y):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_109camera_marker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_108camera_marker[] = "CameraMarker fetches the 2D centroid location of the marker as seen by the camera";
static PyMethodDef __pyx_mdef_6native_109camera_marker = {"camera_marker", (PyCFunction)__pyx_pw_6native_109camera_marker, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_108camera_marker};
static PyObject *__pyx_pw_6native_109camera_marker(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_markerIndex;
  float __pyx_v_x;
  float __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_marker (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_markerIndex,&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_markerIndex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_marker", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_marker", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_marker", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "camera_marker") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_markerIndex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_markerIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("camera_marker", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_marker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_108camera_marker(__pyx_self, __pyx_v_cameraIndex, __pyx_v_markerIndex, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_108camera_marker(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_markerIndex, float __pyx_v_x, float __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_marker", 0);

  /* "native.pyx":307
 * def camera_marker(int cameraIndex, int markerIndex, float x, float y):
 *     """CameraMarker fetches the 2D centroid location of the marker as seen by the camera"""
 *     if TT_CameraMarker(cameraIndex, markerIndex, x, y):             # <<<<<<<<<<<<<<
 *         print "The 2D location of marker %i is x=%f, y=%f" % (markerIndex, x, y)
 *     else:
 */
  __pyx_t_1 = (TT_CameraMarker(__pyx_v_cameraIndex, __pyx_v_markerIndex, __pyx_v_x, __pyx_v_y) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":308
 *     """CameraMarker fetches the 2D centroid location of the marker as seen by the camera"""
 *     if TT_CameraMarker(cameraIndex, markerIndex, x, y):
 *         print "The 2D location of marker %i is x=%f, y=%f" % (markerIndex, x, y)             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error or no marker"
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_markerIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_The_2D_location_of_marker_i_is_x, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":310
 *         print "The 2D location of marker %i is x=%f, y=%f" % (markerIndex, x, y)
 *     else:
 *         print "Error or no marker"             # <<<<<<<<<<<<<<
 * 
 * def camera_pixel_resolution(int cameraIndex, int width, int height):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_or_no_marker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":305
 *     return TT_CameraMarkerCount(cameraIndex)
 * 
 * def camera_marker(int cameraIndex, int markerIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """CameraMarker fetches the 2D centroid location of the marker as seen by the camera"""
 *     if TT_CameraMarker(cameraIndex, markerIndex, x, y):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("native.camera_marker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":312
 *         print "Error or no marker"
 * 
 * def camera_pixel_resolution(int cameraIndex, int width, int height):             # <<<<<<<<<<<<<<
 *     if TT_CameraPixelResolution(cameraIndex, width, height):
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_111camera_pixel_resolution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_111camera_pixel_resolution = {"camera_pixel_resolution", (PyCFunction)__pyx_pw_6native_111camera_pixel_resolution, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_111camera_pixel_resolution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_width;
  int __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_pixel_resolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_pixel_resolution", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_pixel_resolution", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "camera_pixel_resolution") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_width = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_height = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("camera_pixel_resolution", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_pixel_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_110camera_pixel_resolution(__pyx_self, __pyx_v_cameraIndex, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_110camera_pixel_resolution(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_width, int __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_pixel_resolution", 0);

  /* "native.pyx":313
 * 
 * def camera_pixel_resolution(int cameraIndex, int width, int height):
 *     if TT_CameraPixelResolution(cameraIndex, width, height):             # <<<<<<<<<<<<<<
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)
 *     else:
 */
  __pyx_t_1 = (TT_CameraPixelResolution(__pyx_v_cameraIndex, __pyx_v_width, __pyx_v_height) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":314
 * def camera_pixel_resolution(int cameraIndex, int width, int height):
 *     if TT_CameraPixelResolution(cameraIndex, width, height):
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error"
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_cameraIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Pixel_resolution_for_camera_i_is, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":316
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)
 *     else:
 *         print "Error"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_settings(int camindex, int videotype, int exposure, int threshold, int intensity):
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Error) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":312
 *         print "Error or no marker"
 * 
 * def camera_pixel_resolution(int cameraIndex, int width, int height):             # <<<<<<<<<<<<<<
 *     if TT_CameraPixelResolution(cameraIndex, width, height):
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("native.camera_pixel_resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":318
 *         print "Error"
 * 
 * def set_camera_settings(int camindex, int videotype, int exposure, int threshold, int intensity):             # <<<<<<<<<<<<<<
 *     """Set camera settings.  This function allows you to set the camera's video mode, exposure, threshold,
 *     and illumination settings.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_113set_camera_settings(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_112set_camera_settings[] = "Set camera settings.  This function allows you to set the camera's video mode, exposure, threshold,\n    and illumination settings.\n    VideoType: 0 = Segment Mode, 1 = Grayscale Mode, 2 = Object Mode, 4 = Precision Mode, 6 = MJPEG Mode.\n    Exposure: Valid values are:  1-480.\n    Threshold: Valid values are: 0-255.\n    Intensity: Valid values are: 0-15  (This should be set to 15 for most situations)";
static PyMethodDef __pyx_mdef_6native_113set_camera_settings = {"set_camera_settings", (PyCFunction)__pyx_pw_6native_113set_camera_settings, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_112set_camera_settings};
static PyObject *__pyx_pw_6native_113set_camera_settings(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_camindex;
  int __pyx_v_videotype;
  int __pyx_v_exposure;
  int __pyx_v_threshold;
  int __pyx_v_intensity;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_settings (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camindex,&__pyx_n_s_videotype,&__pyx_n_s_exposure,&__pyx_n_s_threshold,&__pyx_n_s_intensity,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_camindex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_videotype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_settings", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exposure)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_settings", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_settings", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_intensity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_settings", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_settings") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_camindex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_camindex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_videotype = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_videotype == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_exposure = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_exposure == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_threshold = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_threshold == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_intensity = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_intensity == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_settings", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_settings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_112set_camera_settings(__pyx_self, __pyx_v_camindex, __pyx_v_videotype, __pyx_v_exposure, __pyx_v_threshold, __pyx_v_intensity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_112set_camera_settings(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_camindex, int __pyx_v_videotype, int __pyx_v_exposure, int __pyx_v_threshold, int __pyx_v_intensity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_settings", 0);

  /* "native.pyx":325
 *     Threshold: Valid values are: 0-255.
 *     Intensity: Valid values are: 0-15  (This should be set to 15 for most situations)"""
 *     return TT_SetCameraSettings(camindex, videotype, exposure, threshold, intensity)             # <<<<<<<<<<<<<<
 * 
 * def set_camera_frame_rate(int cameraIndex, int frameRate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(TT_SetCameraSettings(__pyx_v_camindex, __pyx_v_videotype, __pyx_v_exposure, __pyx_v_threshold, __pyx_v_intensity)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":318
 *         print "Error"
 * 
 * def set_camera_settings(int camindex, int videotype, int exposure, int threshold, int intensity):             # <<<<<<<<<<<<<<
 *     """Set camera settings.  This function allows you to set the camera's video mode, exposure, threshold,
 *     and illumination settings.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.set_camera_settings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":327
 *     return TT_SetCameraSettings(camindex, videotype, exposure, threshold, intensity)
 * 
 * def set_camera_frame_rate(int cameraIndex, int frameRate):             # <<<<<<<<<<<<<<
 *     """Set the frame rate for the given zero based camera index.
 *     Returns true if the operation was successful and false otherwise.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_115set_camera_frame_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6native_114set_camera_frame_rate[] = "Set the frame rate for the given zero based camera index.\n    Returns true if the operation was successful and false otherwise.\n    If the operation fails, check that the camera index is valid and\n    that devices have been initialized with TT_Initialize()";
static PyMethodDef __pyx_mdef_6native_115set_camera_frame_rate = {"set_camera_frame_rate", (PyCFunction)__pyx_pw_6native_115set_camera_frame_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6native_114set_camera_frame_rate};
static PyObject *__pyx_pw_6native_115set_camera_frame_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_frameRate;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_frame_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_frameRate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frameRate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_frame_rate", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_frame_rate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_frameRate = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_frameRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_frame_rate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_frame_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_114set_camera_frame_rate(__pyx_self, __pyx_v_cameraIndex, __pyx_v_frameRate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_114set_camera_frame_rate(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_frameRate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_frame_rate", 0);

  /* "native.pyx":332
 *     If the operation fails, check that the camera index is valid and
 *     that devices have been initialized with TT_Initialize()"""
 *     if TT_SetCameraFrameRate(cameraIndex, frameRate):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraFrameRate(__pyx_v_cameraIndex, __pyx_v_frameRate) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":333
 *     that devices have been initialized with TT_Initialize()"""
 *     if TT_SetCameraFrameRate(cameraIndex, frameRate):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Not set"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":335
 *         print "Set"
 *     else:
 *         print "Error. Not set"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Not_set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":327
 *     return TT_SetCameraSettings(camindex, videotype, exposure, threshold, intensity)
 * 
 * def set_camera_frame_rate(int cameraIndex, int frameRate):             # <<<<<<<<<<<<<<
 *     """Set the frame rate for the given zero based camera index.
 *     Returns true if the operation was successful and false otherwise.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_frame_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":341
 * #available. This usually means that either the camera index is not valid or devices have not been
 * #initialized with TT_Initialize()
 * def camera_frame_rate(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """frames/sec"""
 *     return TT_CameraFrameRate(cameraIndex)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_117camera_frame_rate(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static char __pyx_doc_6native_116camera_frame_rate[] = "frames/sec";
static PyMethodDef __pyx_mdef_6native_117camera_frame_rate = {"camera_frame_rate", (PyCFunction)__pyx_pw_6native_117camera_frame_rate, METH_O, __pyx_doc_6native_116camera_frame_rate};
static PyObject *__pyx_pw_6native_117camera_frame_rate(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_frame_rate (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_frame_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_116camera_frame_rate(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_116camera_frame_rate(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_frame_rate", 0);

  /* "native.pyx":343
 * def camera_frame_rate(int cameraIndex):
 *     """frames/sec"""
 *     return TT_CameraFrameRate(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_exposure(int cameraIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraFrameRate(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":341
 * #available. This usually means that either the camera index is not valid or devices have not been
 * #initialized with TT_Initialize()
 * def camera_frame_rate(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """frames/sec"""
 *     return TT_CameraFrameRate(cameraIndex)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_frame_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":345
 *     return TT_CameraFrameRate(cameraIndex)
 * 
 * def camera_exposure(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraExposure(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_119camera_exposure(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_119camera_exposure = {"camera_exposure", (PyCFunction)__pyx_pw_6native_119camera_exposure, METH_O, 0};
static PyObject *__pyx_pw_6native_119camera_exposure(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_exposure (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_exposure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_118camera_exposure(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_118camera_exposure(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_exposure", 0);

  /* "native.pyx":346
 * 
 * def camera_exposure(int cameraIndex):
 *     return TT_CameraExposure(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_threshold(int cameraIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraExposure(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":345
 *     return TT_CameraFrameRate(cameraIndex)
 * 
 * def camera_exposure(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraExposure(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_exposure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":348
 *     return TT_CameraExposure(cameraIndex)
 * 
 * def camera_threshold(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraThreshold(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_121camera_threshold(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_121camera_threshold = {"camera_threshold", (PyCFunction)__pyx_pw_6native_121camera_threshold, METH_O, 0};
static PyObject *__pyx_pw_6native_121camera_threshold(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_threshold (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_120camera_threshold(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_120camera_threshold(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_threshold", 0);

  /* "native.pyx":349
 * 
 * def camera_threshold(int cameraIndex):
 *     return TT_CameraThreshold(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_intensity(int cameraIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraThreshold(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":348
 *     return TT_CameraExposure(cameraIndex)
 * 
 * def camera_threshold(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraThreshold(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":351
 *     return TT_CameraThreshold(cameraIndex)
 * 
 * def camera_intensity(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraIntensity(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_123camera_intensity(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_123camera_intensity = {"camera_intensity", (PyCFunction)__pyx_pw_6native_123camera_intensity, METH_O, 0};
static PyObject *__pyx_pw_6native_123camera_intensity(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_intensity (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_intensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_122camera_intensity(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_122camera_intensity(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_intensity", 0);

  /* "native.pyx":352
 * 
 * def camera_intensity(int cameraIndex):
 *     return TT_CameraIntensity(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_temperature(int cameraIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraIntensity(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":351
 *     return TT_CameraThreshold(cameraIndex)
 * 
 * def camera_intensity(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraIntensity(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_intensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":354
 *     return TT_CameraIntensity(cameraIndex)
 * 
 * def camera_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraTemperature(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_125camera_temperature(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_125camera_temperature = {"camera_temperature", (PyCFunction)__pyx_pw_6native_125camera_temperature, METH_O, 0};
static PyObject *__pyx_pw_6native_125camera_temperature(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_temperature (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_temperature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_124camera_temperature(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_124camera_temperature(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_temperature", 0);

  /* "native.pyx":355
 * 
 * def camera_temperature(int cameraIndex):
 *     return TT_CameraTemperature(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_ring_light_temperature(int cameraIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_CameraTemperature(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":354
 *     return TT_CameraIntensity(cameraIndex)
 * 
 * def camera_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraTemperature(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_temperature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":357
 *     return TT_CameraTemperature(cameraIndex)
 * 
 * def camera_ring_light_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraRinglightTemperature(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_127camera_ring_light_temperature(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_127camera_ring_light_temperature = {"camera_ring_light_temperature", (PyCFunction)__pyx_pw_6native_127camera_ring_light_temperature, METH_O, 0};
static PyObject *__pyx_pw_6native_127camera_ring_light_temperature(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_ring_light_temperature (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_ring_light_temperature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_126camera_ring_light_temperature(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_126camera_ring_light_temperature(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_ring_light_temperature", 0);

  /* "native.pyx":358
 * 
 * def camera_ring_light_temperature(int cameraIndex):
 *     return  TT_CameraRinglightTemperature(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(TT_CameraRinglightTemperature(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":357
 *     return TT_CameraTemperature(cameraIndex)
 * 
 * def camera_ring_light_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraRinglightTemperature(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_ring_light_temperature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":362
 * 
 * #Camera's Full Frame Grayscale Decimation
 * def camera_grayscale_decimation(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_129camera_grayscale_decimation(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_129camera_grayscale_decimation = {"camera_grayscale_decimation", (PyCFunction)__pyx_pw_6native_129camera_grayscale_decimation, METH_O, 0};
static PyObject *__pyx_pw_6native_129camera_grayscale_decimation(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_grayscale_decimation (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_grayscale_decimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_128camera_grayscale_decimation(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_128camera_grayscale_decimation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_grayscale_decimation", 0);

  /* "native.pyx":363
 * #Camera's Full Frame Grayscale Decimation
 * def camera_grayscale_decimation(int cameraIndex):
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def set_camera_grayscale_decimation(int cameraIndex, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraGrayscaleDecimation(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":362
 * 
 * #Camera's Full Frame Grayscale Decimation
 * def camera_grayscale_decimation(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_grayscale_decimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":365
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 * def set_camera_grayscale_decimation(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraGrayscaleDecimation(cameraIndex, value):
 *         print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_131set_camera_grayscale_decimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_131set_camera_grayscale_decimation = {"set_camera_grayscale_decimation", (PyCFunction)__pyx_pw_6native_131set_camera_grayscale_decimation, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_131set_camera_grayscale_decimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_grayscale_decimation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_grayscale_decimation", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_grayscale_decimation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_grayscale_decimation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_grayscale_decimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_130set_camera_grayscale_decimation(__pyx_self, __pyx_v_cameraIndex, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_130set_camera_grayscale_decimation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_grayscale_decimation", 0);

  /* "native.pyx":366
 * 
 * def set_camera_grayscale_decimation(int cameraIndex, int value):
 *     if TT_SetCameraGrayscaleDecimation(cameraIndex, value):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraGrayscaleDecimation(__pyx_v_cameraIndex, __pyx_v_value) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":367
 * def set_camera_grayscale_decimation(int cameraIndex, int value):
 *     if TT_SetCameraGrayscaleDecimation(cameraIndex, value):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Not set"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":369
 *         print "Set"
 *     else:
 *         print "Error. Not set"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Not_set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":365
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 * def set_camera_grayscale_decimation(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraGrayscaleDecimation(cameraIndex, value):
 *         print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_grayscale_decimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":373
 * 
 * #Toggle Camera Extended Options
 * def set_camera_filter_switch(int cameraIndex, bool enableIRFilter):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraFilterSwitch(cameraIndex,enableIRFilter):
 *         print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_133set_camera_filter_switch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_133set_camera_filter_switch = {"set_camera_filter_switch", (PyCFunction)__pyx_pw_6native_133set_camera_filter_switch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_133set_camera_filter_switch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  bool __pyx_v_enableIRFilter;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_filter_switch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_enableIRFilter,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enableIRFilter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_filter_switch", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_filter_switch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enableIRFilter = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enableIRFilter == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_filter_switch", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_filter_switch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_132set_camera_filter_switch(__pyx_self, __pyx_v_cameraIndex, __pyx_v_enableIRFilter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_132set_camera_filter_switch(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableIRFilter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_filter_switch", 0);

  /* "native.pyx":374
 * #Toggle Camera Extended Options
 * def set_camera_filter_switch(int cameraIndex, bool enableIRFilter):
 *     if TT_SetCameraFilterSwitch(cameraIndex,enableIRFilter):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraFilterSwitch(__pyx_v_cameraIndex, __pyx_v_enableIRFilter) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":375
 * def set_camera_filter_switch(int cameraIndex, bool enableIRFilter):
 *     if TT_SetCameraFilterSwitch(cameraIndex,enableIRFilter):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Possibly the camera does not have an IR filter"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":377
 *         print "Set"
 *     else:
 *         print "Error. Possibly the camera does not have an IR filter"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Possibly_the_camera_does_n) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":373
 * 
 * #Toggle Camera Extended Options
 * def set_camera_filter_switch(int cameraIndex, bool enableIRFilter):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraFilterSwitch(cameraIndex,enableIRFilter):
 *         print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_filter_switch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":379
 *         print "Error. Possibly the camera does not have an IR filter"
 * 
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAGC(cameraIndex, enableAutomaticGainControl):
 *         print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_135set_camera_agc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_135set_camera_agc = {"set_camera_agc", (PyCFunction)__pyx_pw_6native_135set_camera_agc, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_135set_camera_agc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  bool __pyx_v_enableAutomaticGainControl;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_agc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_enableAutomaticGainControl,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enableAutomaticGainControl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_agc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_agc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enableAutomaticGainControl = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enableAutomaticGainControl == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_agc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_agc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_134set_camera_agc(__pyx_self, __pyx_v_cameraIndex, __pyx_v_enableAutomaticGainControl);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_134set_camera_agc(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableAutomaticGainControl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_agc", 0);

  /* "native.pyx":380
 * 
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):
 *     if TT_SetCameraAGC(cameraIndex, enableAutomaticGainControl):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraAGC(__pyx_v_cameraIndex, __pyx_v_enableAutomaticGainControl) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":381
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):
 *     if TT_SetCameraAGC(cameraIndex, enableAutomaticGainControl):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Possibly the camera does not have AGC"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":383
 *         print "Set"
 *     else:
 *         print "Error. Possibly the camera does not have AGC"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Possibly_the_camera_does_n_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":379
 *         print "Error. Possibly the camera does not have an IR filter"
 * 
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAGC(cameraIndex, enableAutomaticGainControl):
 *         print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_agc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":385
 *         print "Error. Possibly the camera does not have AGC"
 * 
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAEC(cameraIndex, enableAutomaticExposureControl):
 *         print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_137set_camera_aec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_137set_camera_aec = {"set_camera_aec", (PyCFunction)__pyx_pw_6native_137set_camera_aec, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_137set_camera_aec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  bool __pyx_v_enableAutomaticExposureControl;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_aec (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_enableAutomaticExposureControl,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enableAutomaticExposureControl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_aec", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_aec") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enableAutomaticExposureControl = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enableAutomaticExposureControl == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_aec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_aec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_136set_camera_aec(__pyx_self, __pyx_v_cameraIndex, __pyx_v_enableAutomaticExposureControl);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_136set_camera_aec(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableAutomaticExposureControl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_aec", 0);

  /* "native.pyx":386
 * 
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):
 *     if TT_SetCameraAEC(cameraIndex, enableAutomaticExposureControl):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraAEC(__pyx_v_cameraIndex, __pyx_v_enableAutomaticExposureControl) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":387
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):
 *     if TT_SetCameraAEC(cameraIndex, enableAutomaticExposureControl):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Possibly the camera does not have AEC"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":389
 *         print "Set"
 *     else:
 *         print "Error. Possibly the camera does not have AEC"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Possibly_the_camera_does_n_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":385
 *         print "Error. Possibly the camera does not have AGC"
 * 
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAEC(cameraIndex, enableAutomaticExposureControl):
 *         print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_aec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":391
 *         print "Error. Possibly the camera does not have AEC"
 * 
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraHighPower(cameraIndex, enableHighPowerMode):
 *         print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_139set_camera_high_power(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_139set_camera_high_power = {"set_camera_high_power", (PyCFunction)__pyx_pw_6native_139set_camera_high_power, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_139set_camera_high_power(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  bool __pyx_v_enableHighPowerMode;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_high_power (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_enableHighPowerMode,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enableHighPowerMode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_high_power", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_high_power") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enableHighPowerMode = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enableHighPowerMode == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_high_power", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_high_power", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_138set_camera_high_power(__pyx_self, __pyx_v_cameraIndex, __pyx_v_enableHighPowerMode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_138set_camera_high_power(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enableHighPowerMode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_high_power", 0);

  /* "native.pyx":392
 * 
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):
 *     if TT_SetCameraHighPower(cameraIndex, enableHighPowerMode):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraHighPower(__pyx_v_cameraIndex, __pyx_v_enableHighPowerMode) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":393
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):
 *     if TT_SetCameraHighPower(cameraIndex, enableHighPowerMode):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Possibly the camera does not have HighPowerMode"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":395
 *         print "Set"
 *     else:
 *         print "Error. Possibly the camera does not have HighPowerMode"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Possibly_the_camera_does_n_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":391
 *         print "Error. Possibly the camera does not have AEC"
 * 
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraHighPower(cameraIndex, enableHighPowerMode):
 *         print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_high_power", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":397
 *         print "Error. Possibly the camera does not have HighPowerMode"
 * 
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraMJPEGHighQuality(cameraIndex, mjpegQuality):
 *         print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_141set_camera_mjpeg_high_quality(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_141set_camera_mjpeg_high_quality = {"set_camera_mjpeg_high_quality", (PyCFunction)__pyx_pw_6native_141set_camera_mjpeg_high_quality, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_141set_camera_mjpeg_high_quality(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_mjpegQuality;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_mjpeg_high_quality (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_mjpegQuality,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mjpegQuality)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_mjpeg_high_quality", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_mjpeg_high_quality") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_mjpegQuality = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mjpegQuality == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_mjpeg_high_quality", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_mjpeg_high_quality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_140set_camera_mjpeg_high_quality(__pyx_self, __pyx_v_cameraIndex, __pyx_v_mjpegQuality);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_140set_camera_mjpeg_high_quality(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_mjpegQuality) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_mjpeg_high_quality", 0);

  /* "native.pyx":398
 * 
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):
 *     if TT_SetCameraMJPEGHighQuality(cameraIndex, mjpegQuality):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraMJPEGHighQuality(__pyx_v_cameraIndex, __pyx_v_mjpegQuality) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":399
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):
 *     if TT_SetCameraMJPEGHighQuality(cameraIndex, mjpegQuality):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Possibly the camera does not have HighQuality for MJPEG"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":401
 *         print "Set"
 *     else:
 *         print "Error. Possibly the camera does not have HighQuality for MJPEG"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Possibly_the_camera_does_n_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":397
 *         print "Error. Possibly the camera does not have HighPowerMode"
 * 
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraMJPEGHighQuality(cameraIndex, mjpegQuality):
 *         print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_mjpeg_high_quality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":405
 * 
 * #Camera Imager Gain
 * def camera_imager_gain(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_143camera_imager_gain(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_143camera_imager_gain = {"camera_imager_gain", (PyCFunction)__pyx_pw_6native_143camera_imager_gain, METH_O, 0};
static PyObject *__pyx_pw_6native_143camera_imager_gain(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_imager_gain (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_imager_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_142camera_imager_gain(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_142camera_imager_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_imager_gain", 0);

  /* "native.pyx":406
 * #Camera Imager Gain
 * def camera_imager_gain(int cameraIndex):
 *     return  TT_CameraImagerGain(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def camera_imager_gain_levels(int cameraIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraImagerGain(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":405
 * 
 * #Camera Imager Gain
 * def camera_imager_gain(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_imager_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":408
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 * def camera_imager_gain_levels(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_145camera_imager_gain_levels(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_145camera_imager_gain_levels = {"camera_imager_gain_levels", (PyCFunction)__pyx_pw_6native_145camera_imager_gain_levels, METH_O, 0};
static PyObject *__pyx_pw_6native_145camera_imager_gain_levels(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_imager_gain_levels (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_imager_gain_levels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_144camera_imager_gain_levels(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_144camera_imager_gain_levels(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_imager_gain_levels", 0);

  /* "native.pyx":409
 * 
 * def camera_imager_gain_levels(int cameraIndex):
 *     return  TT_CameraImagerGainLevels(cameraIndex)             # <<<<<<<<<<<<<<
 * 
 * def set_camera_imager_gain(int cameraIndex, int value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(TT_CameraImagerGainLevels(__pyx_v_cameraIndex)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "native.pyx":408
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 * def camera_imager_gain_levels(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("native.camera_imager_gain_levels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":411
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 * def set_camera_imager_gain(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     TT_SetCameraImagerGain(cameraIndex, value)
 *     print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_147set_camera_imager_gain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_147set_camera_imager_gain = {"set_camera_imager_gain", (PyCFunction)__pyx_pw_6native_147set_camera_imager_gain, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_147set_camera_imager_gain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_imager_gain (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_imager_gain", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_imager_gain") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_imager_gain", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_imager_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_146set_camera_imager_gain(__pyx_self, __pyx_v_cameraIndex, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_146set_camera_imager_gain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_imager_gain", 0);

  /* "native.pyx":412
 * 
 * def set_camera_imager_gain(int cameraIndex, int value):
 *     TT_SetCameraImagerGain(cameraIndex, value)             # <<<<<<<<<<<<<<
 *     print "Set"
 * 
 */
  TT_SetCameraImagerGain(__pyx_v_cameraIndex, __pyx_v_value);

  /* "native.pyx":413
 * def set_camera_imager_gain(int cameraIndex, int value):
 *     TT_SetCameraImagerGain(cameraIndex, value)
 *     print "Set"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":411
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 * def set_camera_imager_gain(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     TT_SetCameraImagerGain(cameraIndex, value)
 *     print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_imager_gain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":417
 * 
 * #Camera Illumination
 * def is_continuous_ir_available(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_IsContinuousIRAvailable(cameraIndex):
 *         print "Yes"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_149is_continuous_ir_available(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_149is_continuous_ir_available = {"is_continuous_ir_available", (PyCFunction)__pyx_pw_6native_149is_continuous_ir_available, METH_O, 0};
static PyObject *__pyx_pw_6native_149is_continuous_ir_available(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_continuous_ir_available (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.is_continuous_ir_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_148is_continuous_ir_available(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_148is_continuous_ir_available(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_continuous_ir_available", 0);

  /* "native.pyx":418
 * #Camera Illumination
 * def is_continuous_ir_available(int cameraIndex):
 *     if TT_IsContinuousIRAvailable(cameraIndex):             # <<<<<<<<<<<<<<
 *         print "Yes"
 *     else:
 */
  __pyx_t_1 = (TT_IsContinuousIRAvailable(__pyx_v_cameraIndex) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":419
 * def is_continuous_ir_available(int cameraIndex):
 *     if TT_IsContinuousIRAvailable(cameraIndex):
 *         print "Yes"             # <<<<<<<<<<<<<<
 *     else:
 *         print "No"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Yes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":421
 *         print "Yes"
 *     else:
 *         print "No"             # <<<<<<<<<<<<<<
 * 
 * def continuous_ir(int cameraIndex):
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_No) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":417
 * 
 * #Camera Illumination
 * def is_continuous_ir_available(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_IsContinuousIRAvailable(cameraIndex):
 *         print "Yes"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.is_continuous_ir_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":423
 *         print "No"
 * 
 * def continuous_ir(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ContinuousIR(cameraIndex):
 *         print "On"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_151continuous_ir(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_151continuous_ir = {"continuous_ir", (PyCFunction)__pyx_pw_6native_151continuous_ir, METH_O, 0};
static PyObject *__pyx_pw_6native_151continuous_ir(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("continuous_ir (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.continuous_ir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_150continuous_ir(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_150continuous_ir(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("continuous_ir", 0);

  /* "native.pyx":424
 * 
 * def continuous_ir(int cameraIndex):
 *     if TT_ContinuousIR(cameraIndex):             # <<<<<<<<<<<<<<
 *         print "On"
 *     else:
 */
  __pyx_t_1 = (TT_ContinuousIR(__pyx_v_cameraIndex) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":425
 * def continuous_ir(int cameraIndex):
 *     if TT_ContinuousIR(cameraIndex):
 *         print "On"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Off"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_On) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":427
 *         print "On"
 *     else:
 *         print "Off"             # <<<<<<<<<<<<<<
 * 
 * def set_continous_ir(int cameraIndex, bool enable):
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Off) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":423
 *         print "No"
 * 
 * def continuous_ir(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ContinuousIR(cameraIndex):
 *         print "On"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.continuous_ir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":429
 *         print "Off"
 * 
 * def set_continous_ir(int cameraIndex, bool enable):             # <<<<<<<<<<<<<<
 *     TT_SetContinuousIR(cameraIndex, enable)
 *     print "Set"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_153set_continous_ir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_153set_continous_ir = {"set_continous_ir", (PyCFunction)__pyx_pw_6native_153set_continous_ir, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_153set_continous_ir(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  bool __pyx_v_enable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_continous_ir (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_enable,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_continous_ir", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_continous_ir") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_enable = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_enable == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_continous_ir", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_continous_ir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_152set_continous_ir(__pyx_self, __pyx_v_cameraIndex, __pyx_v_enable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_152set_continous_ir(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, bool __pyx_v_enable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_continous_ir", 0);

  /* "native.pyx":430
 * 
 * def set_continous_ir(int cameraIndex, bool enable):
 *     TT_SetContinuousIR(cameraIndex, enable)             # <<<<<<<<<<<<<<
 *     print "Set"
 * 
 */
  TT_SetContinuousIR(__pyx_v_cameraIndex, __pyx_v_enable);

  /* "native.pyx":431
 * def set_continous_ir(int cameraIndex, bool enable):
 *     TT_SetContinuousIR(cameraIndex, enable)
 *     print "Set"             # <<<<<<<<<<<<<<
 * 
 * ##def set_continuous_camera_mjpeg_high_quality_ir(int cameraIndex, bool Enable):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":429
 *         print "Off"
 * 
 * def set_continous_ir(int cameraIndex, bool enable):             # <<<<<<<<<<<<<<
 *     TT_SetContinuousIR(cameraIndex, enable)
 *     print "Set"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_continous_ir", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":439
 * 
 * #Camera Masking
 * def camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_155camera_mask(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_155camera_mask = {"camera_mask", (PyCFunction)__pyx_pw_6native_155camera_mask, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_155camera_mask(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  PyObject *__pyx_v_buffername = 0;
  int __pyx_v_bufferSize;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_mask (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_buffername,&__pyx_n_s_bufferSize,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buffername)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_mask", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bufferSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_mask", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "camera_mask") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_buffername = values[1];
    __pyx_v_bufferSize = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_bufferSize == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("camera_mask", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_154camera_mask(__pyx_self, __pyx_v_cameraIndex, __pyx_v_buffername, __pyx_v_bufferSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_154camera_mask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, PyObject *__pyx_v_buffername, int __pyx_v_bufferSize) {
  unsigned char *__pyx_v_buffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_mask", 0);

  /* "native.pyx":440
 * #Camera Masking
 * def camera_mask(int cameraIndex, buffername, int bufferSize):
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer=buffername
 *     if TT_CameraMask(cameraIndex, buffer, bufferSize):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_buffername)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_buffername_i);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":441
 * def camera_mask(int cameraIndex, buffername, int bufferSize):
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername             # <<<<<<<<<<<<<<
 *     if TT_CameraMask(cameraIndex, buffer, bufferSize):
 *         print "Mask exists"
 */
  __pyx_t_2 = __Pyx_PyObject_AsUString(__pyx_v_buffername); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_buffer = __pyx_t_2;

  /* "native.pyx":442
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 *     if TT_CameraMask(cameraIndex, buffer, bufferSize):             # <<<<<<<<<<<<<<
 *         print "Mask exists"
 *     else:
 */
  __pyx_t_1 = (TT_CameraMask(__pyx_v_cameraIndex, __pyx_v_buffer, __pyx_v_bufferSize) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":443
 *     cdef unsigned char * buffer=buffername
 *     if TT_CameraMask(cameraIndex, buffer, bufferSize):
 *         print "Mask exists"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Mask does not exist"
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Mask_exists) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":445
 *         print "Mask exists"
 *     else:
 *         print "Mask does not exist"             # <<<<<<<<<<<<<<
 * 
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Mask_does_not_exist) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":439
 * 
 * #Camera Masking
 * def camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.camera_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":447
 *         print "Mask does not exist"
 * 
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_157set_camera_mask(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_157set_camera_mask = {"set_camera_mask", (PyCFunction)__pyx_pw_6native_157set_camera_mask, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_157set_camera_mask(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  PyObject *__pyx_v_buffername = 0;
  int __pyx_v_bufferSize;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_camera_mask (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_buffername,&__pyx_n_s_bufferSize,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buffername)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_mask", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bufferSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_camera_mask", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_camera_mask") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_buffername = values[1];
    __pyx_v_bufferSize = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_bufferSize == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_camera_mask", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.set_camera_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_156set_camera_mask(__pyx_self, __pyx_v_cameraIndex, __pyx_v_buffername, __pyx_v_bufferSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_156set_camera_mask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, PyObject *__pyx_v_buffername, int __pyx_v_bufferSize) {
  unsigned char *__pyx_v_buffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_camera_mask", 0);

  /* "native.pyx":448
 * 
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"             # <<<<<<<<<<<<<<
 *     cdef unsigned char * buffer=buffername
 *     if TT_SetCameraMask(cameraIndex, buffer, bufferSize):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_buffername)) == ((PyObject *)((PyObject*)(&PyString_Type))));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Argument_should_be_buffername_i);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "native.pyx":449
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername             # <<<<<<<<<<<<<<
 *     if TT_SetCameraMask(cameraIndex, buffer, bufferSize):
 *         print "Set"
 */
  __pyx_t_2 = __Pyx_PyObject_AsUString(__pyx_v_buffername); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_buffer = __pyx_t_2;

  /* "native.pyx":450
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 *     if TT_SetCameraMask(cameraIndex, buffer, bufferSize):             # <<<<<<<<<<<<<<
 *         print "Set"
 *     else:
 */
  __pyx_t_1 = (TT_SetCameraMask(__pyx_v_cameraIndex, __pyx_v_buffer, __pyx_v_bufferSize) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":451
 *     cdef unsigned char * buffer=buffername
 *     if TT_SetCameraMask(cameraIndex, buffer, bufferSize):
 *         print "Set"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Not set"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":453
 *         print "Set"
 *     else:
 *         print "Error. Not set"             # <<<<<<<<<<<<<<
 * 
 * def clear_camera_mask(int cameraIndex):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Not_set) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":447
 *         print "Mask does not exist"
 * 
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.set_camera_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":455
 *         print "Error. Not set"
 * 
 * def clear_camera_mask(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ClearCameraMask(cameraIndex):
 *         print "Cleared"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_159clear_camera_mask(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex); /*proto*/
static PyMethodDef __pyx_mdef_6native_159clear_camera_mask = {"clear_camera_mask", (PyCFunction)__pyx_pw_6native_159clear_camera_mask, METH_O, 0};
static PyObject *__pyx_pw_6native_159clear_camera_mask(PyObject *__pyx_self, PyObject *__pyx_arg_cameraIndex) {
  int __pyx_v_cameraIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_camera_mask (wrapper)", 0);
  assert(__pyx_arg_cameraIndex); {
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(__pyx_arg_cameraIndex); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.clear_camera_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_158clear_camera_mask(__pyx_self, ((int)__pyx_v_cameraIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_158clear_camera_mask(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_camera_mask", 0);

  /* "native.pyx":456
 * 
 * def clear_camera_mask(int cameraIndex):
 *     if TT_ClearCameraMask(cameraIndex):             # <<<<<<<<<<<<<<
 *         print "Cleared"
 *     else:
 */
  __pyx_t_1 = (TT_ClearCameraMask(__pyx_v_cameraIndex) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":457
 * def clear_camera_mask(int cameraIndex):
 *     if TT_ClearCameraMask(cameraIndex):
 *         print "Cleared"             # <<<<<<<<<<<<<<
 *     else:
 *         print "Not cleared"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_Cleared) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":459
 *         print "Cleared"
 *     else:
 *         print "Not cleared"             # <<<<<<<<<<<<<<
 * 
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Not_cleared) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":455
 *         print "Error. Not set"
 * 
 * def clear_camera_mask(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ClearCameraMask(cameraIndex):
 *         print "Cleared"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("native.clear_camera_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "native.pyx":461
 *         print "Not cleared"
 * 
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):             # <<<<<<<<<<<<<<
 *     if TT_CameraMaskInfo(cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid):
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6native_161camera_mask_info(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6native_161camera_mask_info = {"camera_mask_info", (PyCFunction)__pyx_pw_6native_161camera_mask_info, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6native_161camera_mask_info(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_cameraIndex;
  int __pyx_v_blockingMaskWidth;
  int __pyx_v_blockingMaskHeight;
  int __pyx_v_blockingMaskGrid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("camera_mask_info (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cameraIndex,&__pyx_n_s_blockingMaskWidth,&__pyx_n_s_blockingMaskHeight,&__pyx_n_s_blockingMaskGrid,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cameraIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_blockingMaskWidth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_mask_info", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_blockingMaskHeight)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_mask_info", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_blockingMaskGrid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("camera_mask_info", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "camera_mask_info") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_cameraIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_cameraIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_blockingMaskWidth = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_blockingMaskWidth == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_blockingMaskHeight = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_blockingMaskHeight == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_blockingMaskGrid = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_blockingMaskGrid == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("camera_mask_info", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("native.camera_mask_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6native_160camera_mask_info(__pyx_self, __pyx_v_cameraIndex, __pyx_v_blockingMaskWidth, __pyx_v_blockingMaskHeight, __pyx_v_blockingMaskGrid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6native_160camera_mask_info(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_cameraIndex, int __pyx_v_blockingMaskWidth, int __pyx_v_blockingMaskHeight, int __pyx_v_blockingMaskGrid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("camera_mask_info", 0);

  /* "native.pyx":462
 * 
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):
 *     if TT_CameraMaskInfo(cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid):             # <<<<<<<<<<<<<<
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)
 *     else:
 */
  __pyx_t_1 = (TT_CameraMaskInfo(__pyx_v_cameraIndex, __pyx_v_blockingMaskWidth, __pyx_v_blockingMaskHeight, __pyx_v_blockingMaskGrid) != 0);
  if (__pyx_t_1) {

    /* "native.pyx":463
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):
 *     if TT_CameraMaskInfo(cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid):
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)             # <<<<<<<<<<<<<<
 *     else:
 *         print "Error. Possibly no mask for this camera"
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_cameraIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_blockingMaskWidth); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_blockingMaskHeight); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_blockingMaskGrid); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Camera_i_blocking_masks_width_f, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "native.pyx":465
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)
 *     else:
 *         print "Error. Possibly no mask for this camera"             # <<<<<<<<<<<<<<
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Error_Possibly_no_mask_for_this) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "native.pyx":461
 *         print "Not cleared"
 * 
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):             # <<<<<<<<<<<<<<
 *     if TT_CameraMaskInfo(cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid):
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("native.camera_mask_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "native",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_2D_x_position_as_seen_from_came, __pyx_k_2D_x_position_as_seen_from_came, sizeof(__pyx_k_2D_x_position_as_seen_from_came), 0, 0, 1, 0},
  {&__pyx_kp_s_2D_y_position_is_f, __pyx_k_2D_y_position_is_f, sizeof(__pyx_k_2D_y_position_is_f), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_should_be_buffername_i, __pyx_k_Argument_should_be_buffername_i, sizeof(__pyx_k_Argument_should_be_buffername_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Argument_should_be_filename_i_e, __pyx_k_Argument_should_be_filename_i_e, sizeof(__pyx_k_Argument_should_be_filename_i_e), 0, 0, 1, 0},
  {&__pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_k_C_Users_nico_Desktop_OptiTrackPy, sizeof(__pyx_k_C_Users_nico_Desktop_OptiTrackPy), 0, 0, 1, 0},
  {&__pyx_kp_s_Camera_i_blocking_masks_width_f, __pyx_k_Camera_i_blocking_masks_width_f, sizeof(__pyx_k_Camera_i_blocking_masks_width_f), 0, 0, 1, 0},
  {&__pyx_kp_s_Camera_is_not_contributing_to_th, __pyx_k_Camera_is_not_contributing_to_th, sizeof(__pyx_k_Camera_is_not_contributing_to_th), 0, 0, 1, 0},
  {&__pyx_n_s_Cleared, __pyx_k_Cleared, sizeof(__pyx_k_Cleared), 0, 0, 1, 1},
  {&__pyx_kp_s_Due_to_need_of_const_C_array_siz, __pyx_k_Due_to_need_of_const_C_array_siz, sizeof(__pyx_k_Due_to_need_of_const_C_array_siz), 0, 0, 1, 0},
  {&__pyx_n_s_Error, __pyx_k_Error, sizeof(__pyx_k_Error), 0, 0, 1, 1},
  {&__pyx_kp_s_Error_Not_set, __pyx_k_Error_Not_set, sizeof(__pyx_k_Error_Not_set), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Possibly_no_mask_for_this, __pyx_k_Error_Possibly_no_mask_for_this, sizeof(__pyx_k_Error_Possibly_no_mask_for_this), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Possibly_the_camera_does_n, __pyx_k_Error_Possibly_the_camera_does_n, sizeof(__pyx_k_Error_Possibly_the_camera_does_n), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Possibly_the_camera_does_n_2, __pyx_k_Error_Possibly_the_camera_does_n_2, sizeof(__pyx_k_Error_Possibly_the_camera_does_n_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Possibly_the_camera_does_n_3, __pyx_k_Error_Possibly_the_camera_does_n_3, sizeof(__pyx_k_Error_Possibly_the_camera_does_n_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Possibly_the_camera_does_n_4, __pyx_k_Error_Possibly_the_camera_does_n_4, sizeof(__pyx_k_Error_Possibly_the_camera_does_n_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_Possibly_the_camera_does_n_5, __pyx_k_Error_Possibly_the_camera_does_n_5, sizeof(__pyx_k_Error_Possibly_the_camera_does_n_5), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_could_not_remove_Check_if, __pyx_k_Error_could_not_remove_Check_if, sizeof(__pyx_k_Error_could_not_remove_Check_if), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_or_no_marker, __pyx_k_Error_or_no_marker, sizeof(__pyx_k_Error_or_no_marker), 0, 0, 1, 0},
  {&__pyx_n_s_False, __pyx_k_False, sizeof(__pyx_k_False), 0, 0, 1, 1},
  {&__pyx_n_s_Flushed, __pyx_k_Flushed, sizeof(__pyx_k_Flushed), 0, 0, 1, 1},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_kp_s_Mask_does_not_exist, __pyx_k_Mask_does_not_exist, sizeof(__pyx_k_Mask_does_not_exist), 0, 0, 1, 0},
  {&__pyx_kp_s_Mask_exists, __pyx_k_Mask_exists, sizeof(__pyx_k_Mask_exists), 0, 0, 1, 0},
  {&__pyx_n_s_No, __pyx_k_No, sizeof(__pyx_k_No), 0, 0, 1, 1},
  {&__pyx_kp_s_Not_cleared, __pyx_k_Not_cleared, sizeof(__pyx_k_Not_cleared), 0, 0, 1, 0},
  {&__pyx_n_s_Off, __pyx_k_Off, sizeof(__pyx_k_Off), 0, 0, 1, 1},
  {&__pyx_n_s_On, __pyx_k_On, sizeof(__pyx_k_On), 0, 0, 1, 1},
  {&__pyx_kp_s_Orientation_in_quaternions_is_qx, __pyx_k_Orientation_in_quaternions_is_qx, sizeof(__pyx_k_Orientation_in_quaternions_is_qx), 0, 0, 1, 0},
  {&__pyx_kp_s_Pixel_resolution_for_camera_i_is, __pyx_k_Pixel_resolution_for_camera_i_is, sizeof(__pyx_k_Pixel_resolution_for_camera_i_is), 0, 0, 1, 0},
  {&__pyx_n_s_Removed, __pyx_k_Removed, sizeof(__pyx_k_Removed), 0, 0, 1, 1},
  {&__pyx_kp_s_Rigid_body_ID_i, __pyx_k_Rigid_body_ID_i, sizeof(__pyx_k_Rigid_body_ID_i), 0, 0, 1, 0},
  {&__pyx_n_s_Set, __pyx_k_Set, sizeof(__pyx_k_Set), 0, 0, 1, 1},
  {&__pyx_kp_s_The_2D_location_of_marker_i_is_x, __pyx_k_The_2D_location_of_marker_i_is_x, sizeof(__pyx_k_The_2D_location_of_marker_i_is_x), 0, 0, 1, 0},
  {&__pyx_kp_s_The_point_cloud_markers_position, __pyx_k_The_point_cloud_markers_position, sizeof(__pyx_k_The_point_cloud_markers_position), 0, 0, 1, 0},
  {&__pyx_kp_s_The_position_of_rigid_body_i_is, __pyx_k_The_position_of_rigid_body_i_is, sizeof(__pyx_k_The_position_of_rigid_body_i_is), 0, 0, 1, 0},
  {&__pyx_kp_s_The_position_of_rigid_body_s_i_m, __pyx_k_The_position_of_rigid_body_s_i_m, sizeof(__pyx_k_The_position_of_rigid_body_s_i_m), 0, 0, 1, 0},
  {&__pyx_kp_s_There_is_no_corresponding_point, __pyx_k_There_is_no_corresponding_point, sizeof(__pyx_k_There_is_no_corresponding_point), 0, 0, 1, 0},
  {&__pyx_n_s_True, __pyx_k_True, sizeof(__pyx_k_True), 0, 0, 1, 1},
  {&__pyx_n_s_Vash, __pyx_k_Vash, sizeof(__pyx_k_Vash), 0, 0, 1, 1},
  {&__pyx_kp_s_Yaw_is_f_pitch_is_f_roll_is_f, __pyx_k_Yaw_is_f_pitch_is_f_roll_is_f, sizeof(__pyx_k_Yaw_is_f_pitch_is_f_roll_is_f), 0, 0, 1, 0},
  {&__pyx_n_s_Yes, __pyx_k_Yes, sizeof(__pyx_k_Yes), 0, 0, 1, 1},
  {&__pyx_n_s_add_rigid_bodies, __pyx_k_add_rigid_bodies, sizeof(__pyx_k_add_rigid_bodies), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_blockingMaskGrid, __pyx_k_blockingMaskGrid, sizeof(__pyx_k_blockingMaskGrid), 0, 0, 1, 1},
  {&__pyx_n_s_blockingMaskHeight, __pyx_k_blockingMaskHeight, sizeof(__pyx_k_blockingMaskHeight), 0, 0, 1, 1},
  {&__pyx_n_s_blockingMaskWidth, __pyx_k_blockingMaskWidth, sizeof(__pyx_k_blockingMaskWidth), 0, 0, 1, 1},
  {&__pyx_n_s_buffer, __pyx_k_buffer, sizeof(__pyx_k_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_bufferSize, __pyx_k_bufferSize, sizeof(__pyx_k_bufferSize), 0, 0, 1, 1},
  {&__pyx_n_s_buffername, __pyx_k_buffername, sizeof(__pyx_k_buffername), 0, 0, 1, 1},
  {&__pyx_n_s_buffersize, __pyx_k_buffersize, sizeof(__pyx_k_buffersize), 0, 0, 1, 1},
  {&__pyx_n_s_calib_filename, __pyx_k_calib_filename, sizeof(__pyx_k_calib_filename), 0, 0, 1, 1},
  {&__pyx_n_s_camera, __pyx_k_camera, sizeof(__pyx_k_camera), 0, 0, 1, 1},
  {&__pyx_n_s_cameraGroupIndex, __pyx_k_cameraGroupIndex, sizeof(__pyx_k_cameraGroupIndex), 0, 0, 1, 1},
  {&__pyx_n_s_cameraIndex, __pyx_k_cameraIndex, sizeof(__pyx_k_cameraIndex), 0, 0, 1, 1},
  {&__pyx_n_s_camera_count, __pyx_k_camera_count, sizeof(__pyx_k_camera_count), 0, 0, 1, 1},
  {&__pyx_n_s_camera_exposure, __pyx_k_camera_exposure, sizeof(__pyx_k_camera_exposure), 0, 0, 1, 1},
  {&__pyx_n_s_camera_frame_rate, __pyx_k_camera_frame_rate, sizeof(__pyx_k_camera_frame_rate), 0, 0, 1, 1},
  {&__pyx_n_s_camera_grayscale_decimation, __pyx_k_camera_grayscale_decimation, sizeof(__pyx_k_camera_grayscale_decimation), 0, 0, 1, 1},
  {&__pyx_n_s_camera_group_count, __pyx_k_camera_group_count, sizeof(__pyx_k_camera_group_count), 0, 0, 1, 1},
  {&__pyx_n_s_camera_imager_gain, __pyx_k_camera_imager_gain, sizeof(__pyx_k_camera_imager_gain), 0, 0, 1, 1},
  {&__pyx_n_s_camera_imager_gain_levels, __pyx_k_camera_imager_gain_levels, sizeof(__pyx_k_camera_imager_gain_levels), 0, 0, 1, 1},
  {&__pyx_n_s_camera_intensity, __pyx_k_camera_intensity, sizeof(__pyx_k_camera_intensity), 0, 0, 1, 1},
  {&__pyx_n_s_camera_marker, __pyx_k_camera_marker, sizeof(__pyx_k_camera_marker), 0, 0, 1, 1},
  {&__pyx_n_s_camera_marker_count, __pyx_k_camera_marker_count, sizeof(__pyx_k_camera_marker_count), 0, 0, 1, 1},
  {&__pyx_n_s_camera_mask, __pyx_k_camera_mask, sizeof(__pyx_k_camera_mask), 0, 0, 1, 1},
  {&__pyx_n_s_camera_mask_info, __pyx_k_camera_mask_info, sizeof(__pyx_k_camera_mask_info), 0, 0, 1, 1},
  {&__pyx_n_s_camera_name, __pyx_k_camera_name, sizeof(__pyx_k_camera_name), 0, 0, 1, 1},
  {&__pyx_n_s_camera_orientation_matrix, __pyx_k_camera_orientation_matrix, sizeof(__pyx_k_camera_orientation_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_camera_pixel_resolution, __pyx_k_camera_pixel_resolution, sizeof(__pyx_k_camera_pixel_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_camera_ring_light_temperature, __pyx_k_camera_ring_light_temperature, sizeof(__pyx_k_camera_ring_light_temperature), 0, 0, 1, 1},
  {&__pyx_n_s_camera_temperature, __pyx_k_camera_temperature, sizeof(__pyx_k_camera_temperature), 0, 0, 1, 1},
  {&__pyx_n_s_camera_threshold, __pyx_k_camera_threshold, sizeof(__pyx_k_camera_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_camera_x_location, __pyx_k_camera_x_location, sizeof(__pyx_k_camera_x_location), 0, 0, 1, 1},
  {&__pyx_n_s_camera_y_location, __pyx_k_camera_y_location, sizeof(__pyx_k_camera_y_location), 0, 0, 1, 1},
  {&__pyx_n_s_camera_z_location, __pyx_k_camera_z_location, sizeof(__pyx_k_camera_z_location), 0, 0, 1, 1},
  {&__pyx_n_s_cameras_group, __pyx_k_cameras_group, sizeof(__pyx_k_cameras_group), 0, 0, 1, 1},
  {&__pyx_n_s_camindex, __pyx_k_camindex, sizeof(__pyx_k_camindex), 0, 0, 1, 1},
  {&__pyx_n_s_clear_camera_mask, __pyx_k_clear_camera_mask, sizeof(__pyx_k_clear_camera_mask), 0, 0, 1, 1},
  {&__pyx_n_s_clear_rigid_body_list, __pyx_k_clear_rigid_body_list, sizeof(__pyx_k_clear_rigid_body_list), 0, 0, 1, 1},
  {&__pyx_n_s_continuous_ir, __pyx_k_continuous_ir, sizeof(__pyx_k_continuous_ir), 0, 0, 1, 1},
  {&__pyx_n_s_create_camera_group, __pyx_k_create_camera_group, sizeof(__pyx_k_create_camera_group), 0, 0, 1, 1},
  {&__pyx_n_s_create_rigid_body, __pyx_k_create_rigid_body, sizeof(__pyx_k_create_rigid_body), 0, 0, 1, 1},
  {&__pyx_n_s_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 0, 1, 1},
  {&__pyx_n_s_enableAutomaticExposureControl, __pyx_k_enableAutomaticExposureControl, sizeof(__pyx_k_enableAutomaticExposureControl), 0, 0, 1, 1},
  {&__pyx_n_s_enableAutomaticGainControl, __pyx_k_enableAutomaticGainControl, sizeof(__pyx_k_enableAutomaticGainControl), 0, 0, 1, 1},
  {&__pyx_n_s_enableHighPowerMode, __pyx_k_enableHighPowerMode, sizeof(__pyx_k_enableHighPowerMode), 0, 0, 1, 1},
  {&__pyx_n_s_enableIRFilter, __pyx_k_enableIRFilter, sizeof(__pyx_k_enableIRFilter), 0, 0, 1, 1},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_exposure, __pyx_k_exposure, sizeof(__pyx_k_exposure), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flush_camera_queues, __pyx_k_flush_camera_queues, sizeof(__pyx_k_flush_camera_queues), 0, 0, 1, 1},
  {&__pyx_n_s_frameRate, __pyx_k_frameRate, sizeof(__pyx_k_frameRate), 0, 0, 1, 1},
  {&__pyx_n_s_frame_camera_centroid, __pyx_k_frame_camera_centroid, sizeof(__pyx_k_frame_camera_centroid), 0, 0, 1, 1},
  {&__pyx_n_s_frame_marker_count, __pyx_k_frame_marker_count, sizeof(__pyx_k_frame_marker_count), 0, 0, 1, 1},
  {&__pyx_n_s_frame_marker_list, __pyx_k_frame_marker_list, sizeof(__pyx_k_frame_marker_list), 0, 0, 1, 1},
  {&__pyx_n_s_frame_marker_x, __pyx_k_frame_marker_x, sizeof(__pyx_k_frame_marker_x), 0, 0, 1, 1},
  {&__pyx_n_s_frame_marker_y, __pyx_k_frame_marker_y, sizeof(__pyx_k_frame_marker_y), 0, 0, 1, 1},
  {&__pyx_n_s_frame_marker_z, __pyx_k_frame_marker_z, sizeof(__pyx_k_frame_marker_z), 0, 0, 1, 1},
  {&__pyx_n_s_frame_time_stamp, __pyx_k_frame_time_stamp, sizeof(__pyx_k_frame_time_stamp), 0, 0, 1, 1},
  {&__pyx_n_s_groupIndex, __pyx_k_groupIndex, sizeof(__pyx_k_groupIndex), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_intensity, __pyx_k_intensity, sizeof(__pyx_k_intensity), 0, 0, 1, 1},
  {&__pyx_n_s_is_continuous_ir_available, __pyx_k_is_continuous_ir_available, sizeof(__pyx_k_is_continuous_ir_available), 0, 0, 1, 1},
  {&__pyx_n_s_is_filter_switch_enabled, __pyx_k_is_filter_switch_enabled, sizeof(__pyx_k_is_filter_switch_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_is_rigid_body_tracked, __pyx_k_is_rigid_body_tracked, sizeof(__pyx_k_is_rigid_body_tracked), 0, 0, 1, 1},
  {&__pyx_n_s_load_bodies_file, __pyx_k_load_bodies_file, sizeof(__pyx_k_load_bodies_file), 0, 0, 1, 1},
  {&__pyx_n_s_load_calibration, __pyx_k_load_calibration, sizeof(__pyx_k_load_calibration), 0, 0, 1, 1},
  {&__pyx_n_s_load_calibration_from_memory, __pyx_k_load_calibration_from_memory, sizeof(__pyx_k_load_calibration_from_memory), 0, 0, 1, 1},
  {&__pyx_n_s_load_project, __pyx_k_load_project, sizeof(__pyx_k_load_project), 0, 0, 1, 1},
  {&__pyx_n_s_load_rigid_bodies, __pyx_k_load_rigid_bodies, sizeof(__pyx_k_load_rigid_bodies), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_markerCount, __pyx_k_markerCount, sizeof(__pyx_k_markerCount), 0, 0, 1, 1},
  {&__pyx_n_s_markerIndex, __pyx_k_markerIndex, sizeof(__pyx_k_markerIndex), 0, 0, 1, 1},
  {&__pyx_n_s_markerList, __pyx_k_markerList, sizeof(__pyx_k_markerList), 0, 0, 1, 1},
  {&__pyx_n_s_markerListp, __pyx_k_markerListp, sizeof(__pyx_k_markerListp), 0, 0, 1, 1},
  {&__pyx_n_s_marker_list, __pyx_k_marker_list, sizeof(__pyx_k_marker_list), 0, 0, 1, 1},
  {&__pyx_n_s_microseconds, __pyx_k_microseconds, sizeof(__pyx_k_microseconds), 0, 0, 1, 1},
  {&__pyx_n_s_mjpegQuality, __pyx_k_mjpegQuality, sizeof(__pyx_k_mjpegQuality), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_native, __pyx_k_native, sizeof(__pyx_k_native), 0, 0, 1, 1},
  {&__pyx_n_s_pitch, __pyx_k_pitch, sizeof(__pyx_k_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_port, __pyx_k_port, sizeof(__pyx_k_port), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_project_file, __pyx_k_project_file, sizeof(__pyx_k_project_file), 0, 0, 1, 1},
  {&__pyx_n_s_qw, __pyx_k_qw, sizeof(__pyx_k_qw), 0, 0, 1, 1},
  {&__pyx_n_s_qx, __pyx_k_qx, sizeof(__pyx_k_qx), 0, 0, 1, 1},
  {&__pyx_n_s_qy, __pyx_k_qy, sizeof(__pyx_k_qy), 0, 0, 1, 1},
  {&__pyx_n_s_qz, __pyx_k_qz, sizeof(__pyx_k_qz), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_remove_camera_group, __pyx_k_remove_camera_group, sizeof(__pyx_k_remove_camera_group), 0, 0, 1, 1},
  {&__pyx_n_s_remove_rigid_body, __pyx_k_remove_rigid_body, sizeof(__pyx_k_remove_rigid_body), 0, 0, 1, 1},
  {&__pyx_n_s_rigidIndex, __pyx_k_rigidIndex, sizeof(__pyx_k_rigidIndex), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_bodies_file, __pyx_k_rigid_bodies_file, sizeof(__pyx_k_rigid_bodies_file), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_enabled, __pyx_k_rigid_body_enabled, sizeof(__pyx_k_rigid_body_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_location, __pyx_k_rigid_body_location, sizeof(__pyx_k_rigid_body_location), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_marker, __pyx_k_rigid_body_marker, sizeof(__pyx_k_rigid_body_marker), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_marker_count, __pyx_k_rigid_body_marker_count, sizeof(__pyx_k_rigid_body_marker_count), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_name, __pyx_k_rigid_body_name, sizeof(__pyx_k_rigid_body_name), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_point_cloud_marker, __pyx_k_rigid_body_point_cloud_marker, sizeof(__pyx_k_rigid_body_point_cloud_marker), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_reset_orientation, __pyx_k_rigid_body_reset_orientation, sizeof(__pyx_k_rigid_body_reset_orientation), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_translate_pivot, __pyx_k_rigid_body_translate_pivot, sizeof(__pyx_k_rigid_body_translate_pivot), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_body_user_data, __pyx_k_rigid_body_user_data, sizeof(__pyx_k_rigid_body_user_data), 0, 0, 1, 1},
  {&__pyx_n_s_rigid_filename, __pyx_k_rigid_filename, sizeof(__pyx_k_rigid_filename), 0, 0, 1, 1},
  {&__pyx_n_s_roll, __pyx_k_roll, sizeof(__pyx_k_roll), 0, 0, 1, 1},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_n_s_save_project, __pyx_k_save_project, sizeof(__pyx_k_save_project), 0, 0, 1, 1},
  {&__pyx_n_s_save_rigid_bodies, __pyx_k_save_rigid_bodies, sizeof(__pyx_k_save_rigid_bodies), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_aec, __pyx_k_set_camera_aec, sizeof(__pyx_k_set_camera_aec), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_agc, __pyx_k_set_camera_agc, sizeof(__pyx_k_set_camera_agc), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_filter_switch, __pyx_k_set_camera_filter_switch, sizeof(__pyx_k_set_camera_filter_switch), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_frame_rate, __pyx_k_set_camera_frame_rate, sizeof(__pyx_k_set_camera_frame_rate), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_grayscale_decimation, __pyx_k_set_camera_grayscale_decimation, sizeof(__pyx_k_set_camera_grayscale_decimation), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_group, __pyx_k_set_camera_group, sizeof(__pyx_k_set_camera_group), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_group_reconstruction, __pyx_k_set_camera_group_reconstruction, sizeof(__pyx_k_set_camera_group_reconstruction), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_high_power, __pyx_k_set_camera_high_power, sizeof(__pyx_k_set_camera_high_power), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_imager_gain, __pyx_k_set_camera_imager_gain, sizeof(__pyx_k_set_camera_imager_gain), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_mask, __pyx_k_set_camera_mask, sizeof(__pyx_k_set_camera_mask), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_mjpeg_high_quality, __pyx_k_set_camera_mjpeg_high_quality, sizeof(__pyx_k_set_camera_mjpeg_high_quality), 0, 0, 1, 1},
  {&__pyx_n_s_set_camera_settings, __pyx_k_set_camera_settings, sizeof(__pyx_k_set_camera_settings), 0, 0, 1, 1},
  {&__pyx_n_s_set_continous_ir, __pyx_k_set_continous_ir, sizeof(__pyx_k_set_continous_ir), 0, 0, 1, 1},
  {&__pyx_n_s_set_enabled_filterswitch, __pyx_k_set_enabled_filterswitch, sizeof(__pyx_k_set_enabled_filterswitch), 0, 0, 1, 1},
  {&__pyx_n_s_set_group_shutter_delay, __pyx_k_set_group_shutter_delay, sizeof(__pyx_k_set_group_shutter_delay), 0, 0, 1, 1},
  {&__pyx_n_s_set_rigid_body_enabled, __pyx_k_set_rigid_body_enabled, sizeof(__pyx_k_set_rigid_body_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_set_rigid_body_user_data, __pyx_k_set_rigid_body_user_data, sizeof(__pyx_k_set_rigid_body_user_data), 0, 0, 1, 1},
  {&__pyx_n_s_shutdown, __pyx_k_shutdown, sizeof(__pyx_k_shutdown), 0, 0, 1, 1},
  {&__pyx_n_s_software_build, __pyx_k_software_build, sizeof(__pyx_k_software_build), 0, 0, 1, 1},
  {&__pyx_n_s_stream_np, __pyx_k_stream_np, sizeof(__pyx_k_stream_np), 0, 0, 1, 1},
  {&__pyx_n_s_stream_trackd, __pyx_k_stream_trackd, sizeof(__pyx_k_stream_trackd), 0, 0, 1, 1},
  {&__pyx_n_s_stream_vrpn, __pyx_k_stream_vrpn, sizeof(__pyx_k_stream_vrpn), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_tracked, __pyx_k_tracked, sizeof(__pyx_k_tracked), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_single_frame, __pyx_k_update_single_frame, sizeof(__pyx_k_update_single_frame), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_videotype, __pyx_k_videotype, sizeof(__pyx_k_videotype), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_yaw, __pyx_k_yaw, sizeof(__pyx_k_yaw), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "native.pyx":9
 * 
 * #STARTUP / SHUTDOWN
 * def initialize():             # <<<<<<<<<<<<<<
 *     """initialize library"""
 *     return TT_Initialize()
 */
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_initialize, 9, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":13
 *     return TT_Initialize()
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """shutdown library"""
 *     return TT_Shutdown()
 */
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_shutdown, 13, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":18
 * 
 * #RIGID BODY INTERFACE ##FILES
 * def load_calibration(calib_filename):             # <<<<<<<<<<<<<<
 *     """load calibration"""
 *     assert type(calib_filename) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_calib_filename); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_load_calibration, 18, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":23
 *     return TT_LoadCalibration(calib_filename)
 * 
 * def load_rigid_bodies(load_bodies_file):             # <<<<<<<<<<<<<<
 *     """load rigid bodies"""
 *     assert type(load_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_load_bodies_file); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_load_rigid_bodies, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":28
 *     return TT_LoadRigidBodies(load_bodies_file)
 * 
 * def save_rigid_bodies(rigid_filename):             # <<<<<<<<<<<<<<
 *     """save rigid bodies"""
 *     assert type(rigid_filename) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_n_s_rigid_filename); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_save_rigid_bodies, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":33
 *     return TT_SaveRigidBodies(rigid_filename)
 * 
 * def add_rigid_bodies(rigid_bodies_file):             # <<<<<<<<<<<<<<
 *     """add rigid bodies"""
 *     assert type(rigid_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_rigid_bodies_file); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_add_rigid_bodies, 33, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":38
 *     return TT_AddRigidBodies(rigid_bodies_file)
 * 
 * def load_project(project_file):             # <<<<<<<<<<<<<<
 *     """load project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_project_file); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_load_project, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":43
 *     return TT_LoadProject(project_file)
 * 
 * def save_project(project_file):             # <<<<<<<<<<<<<<
 *     """save project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_project_file); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_save_project, 43, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":48
 *     return TT_SaveProject(project_file)
 * 
 * def load_calibration_from_memory(buffername,int buffersize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */
  __pyx_tuple__15 = PyTuple_Pack(3, __pyx_n_s_buffername, __pyx_n_s_buffersize, __pyx_n_s_buffer); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_load_calibration_from_memory, 48, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":53
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)
 * 
 * def update():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_Update()
 */
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_update, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":57
 *     return TT_Update()
 * 
 * def update_single_frame():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_UpdateSingleFrame()
 */
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_update_single_frame, 57, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":63
 * 
 * #DATA STREAMING
 * def stream_trackd(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop Trackd Stream
 *        TrackD Streaming Engine: Streams rigid body data via the Trackd protocol"""
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_enabled, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_stream_trackd, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":68
 *     return TT_StreamTrackd(enabled)
 * 
 * def stream_vrpn(bool enabled, int port):             # <<<<<<<<<<<<<<
 *     """Start/stop VRPN Stream
 *        VRPN Streaming Engine: Streams rigid body data via the VRPN protocol.
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_enabled, __pyx_n_s_port); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_stream_vrpn, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":74
 *     return TT_StreamVRPN(enabled, port)
 * 
 * def stream_np(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop NaturalPoint Stream"""
 *     return TT_StreamNP(enabled)
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_enabled, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_stream_np, 74, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":80
 * 
 * #FRAME
 * def frame_marker_count():             # <<<<<<<<<<<<<<
 *     """Returns Frame Markers Count"""
 *     return TT_FrameMarkerCount()
 */
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_marker_count, 80, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":84
 *     return TT_FrameMarkerCount()
 * 
 * def frame_marker_x(int index):             # <<<<<<<<<<<<<<
 *     """Returns X Coord of Marker"""
 *     return TT_FrameMarkerX(index)
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_marker_x, 84, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":88
 *     return TT_FrameMarkerX(index)
 * 
 * def frame_marker_y(int index):             # <<<<<<<<<<<<<<
 *     """Returns Y Coord of Marker"""
 *     return TT_FrameMarkerY(index)
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_marker_y, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":92
 *     return TT_FrameMarkerY(index)
 * 
 * def frame_marker_z(int index):             # <<<<<<<<<<<<<<
 *     """Returns Z Coord of Marker"""
 *     return TT_FrameMarkerZ(index)
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_marker_z, 92, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":96
 *     return TT_FrameMarkerZ(index)
 * 
 * def frame_marker_list():             # <<<<<<<<<<<<<<
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_marker_list, __pyx_n_s_i); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_marker_list, 96, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":104
 *     return marker_list
 * 
 * def frame_time_stamp():             # <<<<<<<<<<<<<<
 *     """Time Stamp of Frame (seconds"""
 *     return TT_FrameTimeStamp()
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_time_stamp, 104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":108
 *     return TT_FrameTimeStamp()
 * 
 * def frame_camera_centroid(int index, int cameraIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """Returns true if the camera is contributing to this 3D marker.
 *        It also returns the location of the 2D centroid that is reconstructing to this 3D marker"""
 */
  __pyx_tuple__35 = PyTuple_Pack(4, __pyx_n_s_index, __pyx_n_s_cameraIndex, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_frame_camera_centroid, 108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":117
 *         print "Camera is not contributing to the 3D position of this marker"
 * 
 * def flush_camera_queues():             # <<<<<<<<<<<<<<
 *     """In the event that you are tracking a very high number of 2D and/or 3D markers (hundreds of 3D markers),
 *     and you find that the data you're getting out has sufficient latency you can call TT_FlushCameraQueues()
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_flush_camera_queues, 117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":127
 * 
 * #RIGID BODY CONTROL
 * def set_rigid_body_user_data(int index, int ID):             # <<<<<<<<<<<<<<
 *     """Set RigidBodies User Data"""
 *     TT_SetRigidBodyUserData(index,ID)
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_ID); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_rigid_body_user_data, 127, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":132
 *     print "Set"
 * 
 * def rigid_body_user_data(int index):             # <<<<<<<<<<<<<<
 *     """Get RigidBodies User Data"""
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_user_data, 132, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":136
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 * 
 * def rigid_body_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns RigidBody Name"""
 *     print "%s" % TT_RigidBodyName(index)
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_name, 136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":140
 *     print "%s" % TT_RigidBodyName(index)
 * 
 * def set_rigid_body_enabled(int index, bool enabled):             # <<<<<<<<<<<<<<
 *     """Set tracking """
 *     TT_SetRigidBodyEnabled(index, enabled)
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_rigid_body_enabled, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":144
 *     TT_SetRigidBodyEnabled(index, enabled)
 * 
 * def rigid_body_enabled(int index):             # <<<<<<<<<<<<<<
 *     """Get tracking"""
 *     return TT_RigidBodyEnabled(index)
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_enabled, 144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":148
 *     return TT_RigidBodyEnabled(index)
 * 
 * def is_rigid_body_tracked(int index):             # <<<<<<<<<<<<<<
 *     """Is rigid body currently tracked"""
 *     if TT_IsRigidBodyTracked(index):
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_is_rigid_body_tracked, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":155
 *         print "No"
 * 
 * def rigid_body_location(int index, float x, float y, float z,             # <<<<<<<<<<<<<<
 *                         float qx, float qy, float qz, float qw,
 *                         float yaw, float pitch, float roll):
 */
  __pyx_tuple__50 = PyTuple_Pack(11, __pyx_n_s_index, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_qx, __pyx_n_s_qy, __pyx_n_s_qz, __pyx_n_s_qw, __pyx_n_s_yaw, __pyx_n_s_pitch, __pyx_n_s_roll); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(11, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_location, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":170
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)
 * 
 * def rigid_body_translate_pivot(int index, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Rigid Body Pivot-Point Translation: Sets a translation offset for the centroid of the rigid body.
 *     Reported values for the location of the rigid body, as well as the 3D visualization, will be shifted
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_index, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_translate_pivot, 170, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":176
 *     return   TT_RigidBodyTranslatePivot(index, x, y, z)
 * 
 * def rigid_body_reset_orientation(int index):             # <<<<<<<<<<<<<<
 *     """Reset orientation to match the current tracked orientation
 *     of the rigid body"""
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_reset_orientation, 176, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":181
 *     TT_RigidBodyResetOrientation(index)
 * 
 * def clear_rigid_body_list():             # <<<<<<<<<<<<<<
 *     """Clear all rigid bodies"""
 *     TT_ClearRigidBodyList()
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_clear_rigid_body_list, 181, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":186
 *     print "Cleared"
 * 
 * def remove_rigid_body(int index):             # <<<<<<<<<<<<<<
 *     """Remove single rigid body"""
 *     return TT_RemoveRigidBody(index)
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_remove_rigid_body, 186, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":190
 *     return TT_RemoveRigidBody(index)
 * 
 * def rigid_body_marker_count(int index):             # <<<<<<<<<<<<<<
 *     """Get marker count"""
 *     return TT_RigidBodyMarkerCount(index)
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_marker_count, 190, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":194
 *     return TT_RigidBodyMarkerCount(index)
 * 
 * def rigid_body_marker(int rigidIndex, int markerIndex, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Get rigid body marker.
 *     ##Not sure if this function sets or gets the location.
 */
  __pyx_tuple__61 = PyTuple_Pack(5, __pyx_n_s_rigidIndex, __pyx_n_s_markerIndex, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_marker, 194, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":204
 *     print "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n" % (rigidIndex, markerIndex, x, y, z)
 * 
 * def rigid_body_point_cloud_marker(int rigidIndex, int markerIndex, bool tracked, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """ Get corresponding point cloud marker
 *     If tracked is false, there is no corresponding point cloud marker.
 */
  __pyx_tuple__63 = PyTuple_Pack(6, __pyx_n_s_rigidIndex, __pyx_n_s_markerIndex, __pyx_n_s_tracked, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_rigid_body_point_cloud_marker, 204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":214
 *         print "There is no corresponding point cloud marker"
 * 
 * def create_rigid_body(str name, int id, int markerCount, markerList):             # <<<<<<<<<<<<<<
 *     """Create a rigid body based on the marker count and marker list provided.
 *     The marker list is expected to contain a list of marker coordinates in the order:
 */
  __pyx_tuple__65 = PyTuple_Pack(6, __pyx_n_s_name, __pyx_n_s_id, __pyx_n_s_markerCount, __pyx_n_s_markerList, __pyx_n_s_markerListp, __pyx_n_s_i); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_create_rigid_body, 214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":225
 *     return TT_CreateRigidBody(name, id, markerCount, markerListp)
 * 
 * def software_build():             # <<<<<<<<<<<<<<
 *     """Software Release Build"""
 *     return TT_BuildNumber()
 */
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_software_build, 225, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":231
 * 
 * #CAMERA GROUP SUPPORT
 * def camera_group_count():             # <<<<<<<<<<<<<<
 *     """Returns number of camera groups"""
 *     return TT_CameraGroupCount()
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_group_count, 231, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":235
 *     return TT_CameraGroupCount()
 * 
 * def create_camera_group():             # <<<<<<<<<<<<<<
 *     """Add an additional group"""
 *     if TT_CreateCameraGroup():
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_create_camera_group, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":242
 *         print "False"
 * 
 * def remove_camera_group(int index):             # <<<<<<<<<<<<<<
 *     """Remove a camera group (must be empty)"""
 *     if TT_RemoveCameraGroup(index):
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_remove_camera_group, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":249
 *         print "Error, could not remove. Check if group is empty"
 * 
 * def cameras_group(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's camera group index"""
 *     return TT_CamerasGroup(index)
 */
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_cameras_group, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":253
 *     return TT_CamerasGroup(index)
 * 
 * def set_group_shutter_delay(int groupIndex, int microseconds):             # <<<<<<<<<<<<<<
 *     """Set camera group's shutter delay"""
 *     TT_SetGroupShutterDelay(groupIndex, microseconds)
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_s_groupIndex, __pyx_n_s_microseconds); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_group_shutter_delay, 253, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":258
 *     print "Set"
 * 
 * def set_camera_group(int cameraIndex, int cameraGroupIndex):             # <<<<<<<<<<<<<<
 *     """Move camera to camera group"""
 *     TT_SetCameraGroup(cameraIndex, cameraGroupIndex)
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraGroupIndex); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_group, 258, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":264
 * 
 * #MARKER SIZE SETTINGS
 * def set_camera_group_reconstruction(int groupIndex, bool enable):             # <<<<<<<<<<<<<<
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(2, __pyx_n_s_groupIndex, __pyx_n_s_enable); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_group_reconstruction, 264, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":267
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 * def set_enabled_filterswitch(bool enabled):             # <<<<<<<<<<<<<<
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_n_s_enabled, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_enabled_filterswitch, 267, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":270
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 * def is_filter_switch_enabled():             # <<<<<<<<<<<<<<
 *     if TT_IsFilterSwitchEnabled():
 *         print "True"
 */
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_is_filter_switch_enabled, 270, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":277
 * 
 * #POINT CLOUD INTERFACE
 * def camera_count():             # <<<<<<<<<<<<<<
 *     """Returns Camera Count"""
 *     return TT_CameraCount()
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_count, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":281
 *     return TT_CameraCount()
 * 
 * def camera_x_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's X Coord"""
 *     return TT_CameraXLocation(index)
 */
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_x_location, 281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":285
 *     return TT_CameraXLocation(index)
 * 
 * def camera_y_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Y Coord"""
 *     return TT_CameraYLocation(index)
 */
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_y_location, 285, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":289
 *     return TT_CameraYLocation(index)
 * 
 * def camera_z_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Z Coord"""
 *     return TT_CameraZLocation(index)
 */
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_z_location, 289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":293
 *     return TT_CameraZLocation(index)
 * 
 * def camera_orientation_matrix(int camera, int index):             # <<<<<<<<<<<<<<
 *     """Orientation"""
 *     return TT_CameraOrientationMatrix(camera, index)
 */
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_n_s_camera, __pyx_n_s_index); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_orientation_matrix, 293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":297
 *     return TT_CameraOrientationMatrix(camera, index)
 * 
 * def camera_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera Name"""
 *     print TT_CameraName(index)
 */
  __pyx_tuple__92 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_index); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_name, 297, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":301
 *     print TT_CameraName(index)
 * 
 * def camera_marker_count(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """Camera's 2D Marker Count"""
 *     return TT_CameraMarkerCount(cameraIndex)
 */
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_marker_count, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":305
 *     return TT_CameraMarkerCount(cameraIndex)
 * 
 * def camera_marker(int cameraIndex, int markerIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """CameraMarker fetches the 2D centroid location of the marker as seen by the camera"""
 *     if TT_CameraMarker(cameraIndex, markerIndex, x, y):
 */
  __pyx_tuple__96 = PyTuple_Pack(4, __pyx_n_s_cameraIndex, __pyx_n_s_markerIndex, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_marker, 305, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":312
 *         print "Error or no marker"
 * 
 * def camera_pixel_resolution(int cameraIndex, int width, int height):             # <<<<<<<<<<<<<<
 *     if TT_CameraPixelResolution(cameraIndex, width, height):
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)
 */
  __pyx_tuple__98 = PyTuple_Pack(3, __pyx_n_s_cameraIndex, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_pixel_resolution, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":318
 *         print "Error"
 * 
 * def set_camera_settings(int camindex, int videotype, int exposure, int threshold, int intensity):             # <<<<<<<<<<<<<<
 *     """Set camera settings.  This function allows you to set the camera's video mode, exposure, threshold,
 *     and illumination settings.
 */
  __pyx_tuple__100 = PyTuple_Pack(5, __pyx_n_s_camindex, __pyx_n_s_videotype, __pyx_n_s_exposure, __pyx_n_s_threshold, __pyx_n_s_intensity); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_settings, 318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":327
 *     return TT_SetCameraSettings(camindex, videotype, exposure, threshold, intensity)
 * 
 * def set_camera_frame_rate(int cameraIndex, int frameRate):             # <<<<<<<<<<<<<<
 *     """Set the frame rate for the given zero based camera index.
 *     Returns true if the operation was successful and false otherwise.
 */
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_frameRate); if (unlikely(!__pyx_tuple__102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_frame_rate, 327, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":341
 * #available. This usually means that either the camera index is not valid or devices have not been
 * #initialized with TT_Initialize()
 * def camera_frame_rate(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """frames/sec"""
 *     return TT_CameraFrameRate(cameraIndex)
 */
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_frame_rate, 341, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":345
 *     return TT_CameraFrameRate(cameraIndex)
 * 
 * def camera_exposure(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraExposure(cameraIndex)
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_exposure, 345, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":348
 *     return TT_CameraExposure(cameraIndex)
 * 
 * def camera_threshold(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraThreshold(cameraIndex)
 * 
 */
  __pyx_tuple__108 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_threshold, 348, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":351
 *     return TT_CameraThreshold(cameraIndex)
 * 
 * def camera_intensity(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraIntensity(cameraIndex)
 * 
 */
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_intensity, 351, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":354
 *     return TT_CameraIntensity(cameraIndex)
 * 
 * def camera_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraTemperature(cameraIndex)
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_temperature, 354, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":357
 *     return TT_CameraTemperature(cameraIndex)
 * 
 * def camera_ring_light_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraRinglightTemperature(cameraIndex)
 * 
 */
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_ring_light_temperature, 357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":362
 * 
 * #Camera's Full Frame Grayscale Decimation
 * def camera_grayscale_decimation(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_grayscale_decimation, 362, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":365
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 * def set_camera_grayscale_decimation(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraGrayscaleDecimation(cameraIndex, value):
 *         print "Set"
 */
  __pyx_tuple__118 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_value); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_grayscale_decimation, 365, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":373
 * 
 * #Toggle Camera Extended Options
 * def set_camera_filter_switch(int cameraIndex, bool enableIRFilter):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraFilterSwitch(cameraIndex,enableIRFilter):
 *         print "Set"
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_enableIRFilter); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_filter_switch, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":379
 *         print "Error. Possibly the camera does not have an IR filter"
 * 
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAGC(cameraIndex, enableAutomaticGainControl):
 *         print "Set"
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_enableAutomaticGainControl); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_agc, 379, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":385
 *         print "Error. Possibly the camera does not have AGC"
 * 
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAEC(cameraIndex, enableAutomaticExposureControl):
 *         print "Set"
 */
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_enableAutomaticExposureControl); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_aec, 385, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":391
 *         print "Error. Possibly the camera does not have AEC"
 * 
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraHighPower(cameraIndex, enableHighPowerMode):
 *         print "Set"
 */
  __pyx_tuple__126 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_enableHighPowerMode); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_high_power, 391, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":397
 *         print "Error. Possibly the camera does not have HighPowerMode"
 * 
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraMJPEGHighQuality(cameraIndex, mjpegQuality):
 *         print "Set"
 */
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_mjpegQuality); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_mjpeg_high_quality, 397, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":405
 * 
 * #Camera Imager Gain
 * def camera_imager_gain(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 */
  __pyx_tuple__130 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_imager_gain, 405, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":408
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 * def camera_imager_gain_levels(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 */
  __pyx_tuple__132 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_imager_gain_levels, 408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":411
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 * def set_camera_imager_gain(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     TT_SetCameraImagerGain(cameraIndex, value)
 *     print "Set"
 */
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_value); if (unlikely(!__pyx_tuple__134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_imager_gain, 411, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":417
 * 
 * #Camera Illumination
 * def is_continuous_ir_available(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_IsContinuousIRAvailable(cameraIndex):
 *         print "Yes"
 */
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_is_continuous_ir_available, 417, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":423
 *         print "No"
 * 
 * def continuous_ir(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ContinuousIR(cameraIndex):
 *         print "On"
 */
  __pyx_tuple__138 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_continuous_ir, 423, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":429
 *         print "Off"
 * 
 * def set_continous_ir(int cameraIndex, bool enable):             # <<<<<<<<<<<<<<
 *     TT_SetContinuousIR(cameraIndex, enable)
 *     print "Set"
 */
  __pyx_tuple__140 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_enable); if (unlikely(!__pyx_tuple__140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_continous_ir, 429, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":439
 * 
 * #Camera Masking
 * def camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */
  __pyx_tuple__142 = PyTuple_Pack(4, __pyx_n_s_cameraIndex, __pyx_n_s_buffername, __pyx_n_s_bufferSize, __pyx_n_s_buffer); if (unlikely(!__pyx_tuple__142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_mask, 439, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":447
 *         print "Mask does not exist"
 * 
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */
  __pyx_tuple__144 = PyTuple_Pack(4, __pyx_n_s_cameraIndex, __pyx_n_s_buffername, __pyx_n_s_bufferSize, __pyx_n_s_buffer); if (unlikely(!__pyx_tuple__144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_set_camera_mask, 447, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":455
 *         print "Error. Not set"
 * 
 * def clear_camera_mask(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ClearCameraMask(cameraIndex):
 *         print "Cleared"
 */
  __pyx_tuple__146 = PyTuple_Pack(2, __pyx_n_s_cameraIndex, __pyx_n_s_cameraIndex); if (unlikely(!__pyx_tuple__146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_clear_camera_mask, 455, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":461
 *         print "Not cleared"
 * 
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):             # <<<<<<<<<<<<<<
 *     if TT_CameraMaskInfo(cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid):
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)
 */
  __pyx_tuple__148 = PyTuple_Pack(4, __pyx_n_s_cameraIndex, __pyx_n_s_blockingMaskWidth, __pyx_n_s_blockingMaskHeight, __pyx_n_s_blockingMaskGrid); if (unlikely(!__pyx_tuple__148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_nico_Desktop_OptiTrackPy, __pyx_n_s_camera_mask_info, 461, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initnative(void); /*proto*/
PyMODINIT_FUNC initnative(void)
#else
PyMODINIT_FUNC PyInit_native(void); /*proto*/
PyMODINIT_FUNC PyInit_native(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_native(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("native", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_native) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "native")) {
      if (unlikely(PyDict_SetItemString(modules, "native", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "native.pyx":1
 * __author__ = 'Vash'             # <<<<<<<<<<<<<<
 * 
 * # means comment from official SDK API (or Cython page) ## means comment from me
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_n_s_Vash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_n_s_Vash) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "native.pyx":9
 * 
 * #STARTUP / SHUTDOWN
 * def initialize():             # <<<<<<<<<<<<<<
 *     """initialize library"""
 *     return TT_Initialize()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_1initialize, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initialize, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":13
 *     return TT_Initialize()
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """shutdown library"""
 *     return TT_Shutdown()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_3shutdown, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shutdown, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":18
 * 
 * #RIGID BODY INTERFACE ##FILES
 * def load_calibration(calib_filename):             # <<<<<<<<<<<<<<
 *     """load calibration"""
 *     assert type(calib_filename) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_5load_calibration, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_load_calibration, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":23
 *     return TT_LoadCalibration(calib_filename)
 * 
 * def load_rigid_bodies(load_bodies_file):             # <<<<<<<<<<<<<<
 *     """load rigid bodies"""
 *     assert type(load_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_7load_rigid_bodies, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_load_rigid_bodies, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":28
 *     return TT_LoadRigidBodies(load_bodies_file)
 * 
 * def save_rigid_bodies(rigid_filename):             # <<<<<<<<<<<<<<
 *     """save rigid bodies"""
 *     assert type(rigid_filename) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_9save_rigid_bodies, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_rigid_bodies, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":33
 *     return TT_SaveRigidBodies(rigid_filename)
 * 
 * def add_rigid_bodies(rigid_bodies_file):             # <<<<<<<<<<<<<<
 *     """add rigid bodies"""
 *     assert type(rigid_bodies_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_11add_rigid_bodies, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_rigid_bodies, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":38
 *     return TT_AddRigidBodies(rigid_bodies_file)
 * 
 * def load_project(project_file):             # <<<<<<<<<<<<<<
 *     """load project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_13load_project, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_load_project, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":43
 *     return TT_LoadProject(project_file)
 * 
 * def save_project(project_file):             # <<<<<<<<<<<<<<
 *     """save project file"""
 *     assert type(project_file) is str, "Argument should be filename, i.e. a string literal"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_15save_project, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_project, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":48
 *     return TT_SaveProject(project_file)
 * 
 * def load_calibration_from_memory(buffername,int buffersize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_17load_calibration_from_memory, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_load_calibration_from_memory, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":53
 *     return TT_LoadCalibrationFromMemory(buffer,buffersize)
 * 
 * def update():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_Update()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_19update, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_update, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":57
 *     return TT_Update()
 * 
 * def update_single_frame():             # <<<<<<<<<<<<<<
 *     """Process incoming camera data"""
 *     return TT_UpdateSingleFrame()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_21update_single_frame, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_update_single_frame, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":63
 * 
 * #DATA STREAMING
 * def stream_trackd(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop Trackd Stream
 *        TrackD Streaming Engine: Streams rigid body data via the Trackd protocol"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_23stream_trackd, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stream_trackd, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":68
 *     return TT_StreamTrackd(enabled)
 * 
 * def stream_vrpn(bool enabled, int port):             # <<<<<<<<<<<<<<
 *     """Start/stop VRPN Stream
 *        VRPN Streaming Engine: Streams rigid body data via the VRPN protocol.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_25stream_vrpn, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stream_vrpn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":74
 *     return TT_StreamVRPN(enabled, port)
 * 
 * def stream_np(bool enabled):             # <<<<<<<<<<<<<<
 *     """Start/stop NaturalPoint Stream"""
 *     return TT_StreamNP(enabled)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_27stream_np, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stream_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":80
 * 
 * #FRAME
 * def frame_marker_count():             # <<<<<<<<<<<<<<
 *     """Returns Frame Markers Count"""
 *     return TT_FrameMarkerCount()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_29frame_marker_count, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_marker_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":84
 *     return TT_FrameMarkerCount()
 * 
 * def frame_marker_x(int index):             # <<<<<<<<<<<<<<
 *     """Returns X Coord of Marker"""
 *     return TT_FrameMarkerX(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_31frame_marker_x, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_marker_x, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":88
 *     return TT_FrameMarkerX(index)
 * 
 * def frame_marker_y(int index):             # <<<<<<<<<<<<<<
 *     """Returns Y Coord of Marker"""
 *     return TT_FrameMarkerY(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_33frame_marker_y, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_marker_y, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":92
 *     return TT_FrameMarkerY(index)
 * 
 * def frame_marker_z(int index):             # <<<<<<<<<<<<<<
 *     """Returns Z Coord of Marker"""
 *     return TT_FrameMarkerZ(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_35frame_marker_z, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_marker_z, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":96
 *     return TT_FrameMarkerZ(index)
 * 
 * def frame_marker_list():             # <<<<<<<<<<<<<<
 *     marker_list=[]
 *     for i in range(0,frame_marker_count()):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_37frame_marker_list, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_marker_list, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":104
 *     return marker_list
 * 
 * def frame_time_stamp():             # <<<<<<<<<<<<<<
 *     """Time Stamp of Frame (seconds"""
 *     return TT_FrameTimeStamp()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_39frame_time_stamp, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_time_stamp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":108
 *     return TT_FrameTimeStamp()
 * 
 * def frame_camera_centroid(int index, int cameraIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """Returns true if the camera is contributing to this 3D marker.
 *        It also returns the location of the 2D centroid that is reconstructing to this 3D marker"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_41frame_camera_centroid, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_frame_camera_centroid, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":117
 *         print "Camera is not contributing to the 3D position of this marker"
 * 
 * def flush_camera_queues():             # <<<<<<<<<<<<<<
 *     """In the event that you are tracking a very high number of 2D and/or 3D markers (hundreds of 3D markers),
 *     and you find that the data you're getting out has sufficient latency you can call TT_FlushCameraQueues()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_43flush_camera_queues, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flush_camera_queues, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":127
 * 
 * #RIGID BODY CONTROL
 * def set_rigid_body_user_data(int index, int ID):             # <<<<<<<<<<<<<<
 *     """Set RigidBodies User Data"""
 *     TT_SetRigidBodyUserData(index,ID)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_45set_rigid_body_user_data, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_rigid_body_user_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":132
 *     print "Set"
 * 
 * def rigid_body_user_data(int index):             # <<<<<<<<<<<<<<
 *     """Get RigidBodies User Data"""
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_47rigid_body_user_data, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_user_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":136
 *     print "Rigid body ID: %i" %  TT_RigidBodyUserData(index)
 * 
 * def rigid_body_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns RigidBody Name"""
 *     print "%s" % TT_RigidBodyName(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_49rigid_body_name, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":140
 *     print "%s" % TT_RigidBodyName(index)
 * 
 * def set_rigid_body_enabled(int index, bool enabled):             # <<<<<<<<<<<<<<
 *     """Set tracking """
 *     TT_SetRigidBodyEnabled(index, enabled)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_51set_rigid_body_enabled, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_rigid_body_enabled, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":144
 *     TT_SetRigidBodyEnabled(index, enabled)
 * 
 * def rigid_body_enabled(int index):             # <<<<<<<<<<<<<<
 *     """Get tracking"""
 *     return TT_RigidBodyEnabled(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_53rigid_body_enabled, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_enabled, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":148
 *     return TT_RigidBodyEnabled(index)
 * 
 * def is_rigid_body_tracked(int index):             # <<<<<<<<<<<<<<
 *     """Is rigid body currently tracked"""
 *     if TT_IsRigidBodyTracked(index):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_55is_rigid_body_tracked, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_rigid_body_tracked, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":155
 *         print "No"
 * 
 * def rigid_body_location(int index, float x, float y, float z,             # <<<<<<<<<<<<<<
 *                         float qx, float qy, float qz, float qw,
 *                         float yaw, float pitch, float roll):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_57rigid_body_location, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_location, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":170
 *     print "Yaw is %f, pitch is %f, roll is %f." % (yaw, pitch, roll)
 * 
 * def rigid_body_translate_pivot(int index, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Rigid Body Pivot-Point Translation: Sets a translation offset for the centroid of the rigid body.
 *     Reported values for the location of the rigid body, as well as the 3D visualization, will be shifted
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_59rigid_body_translate_pivot, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_translate_pivot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":176
 *     return   TT_RigidBodyTranslatePivot(index, x, y, z)
 * 
 * def rigid_body_reset_orientation(int index):             # <<<<<<<<<<<<<<
 *     """Reset orientation to match the current tracked orientation
 *     of the rigid body"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_61rigid_body_reset_orientation, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_reset_orientation, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":181
 *     TT_RigidBodyResetOrientation(index)
 * 
 * def clear_rigid_body_list():             # <<<<<<<<<<<<<<
 *     """Clear all rigid bodies"""
 *     TT_ClearRigidBodyList()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_63clear_rigid_body_list, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clear_rigid_body_list, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":186
 *     print "Cleared"
 * 
 * def remove_rigid_body(int index):             # <<<<<<<<<<<<<<
 *     """Remove single rigid body"""
 *     return TT_RemoveRigidBody(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_65remove_rigid_body, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_remove_rigid_body, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":190
 *     return TT_RemoveRigidBody(index)
 * 
 * def rigid_body_marker_count(int index):             # <<<<<<<<<<<<<<
 *     """Get marker count"""
 *     return TT_RigidBodyMarkerCount(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_67rigid_body_marker_count, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_marker_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":194
 *     return TT_RigidBodyMarkerCount(index)
 * 
 * def rigid_body_marker(int rigidIndex, int markerIndex, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """Get rigid body marker.
 *     ##Not sure if this function sets or gets the location.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_69rigid_body_marker, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_marker, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":204
 *     print "The position of rigid body's %i marker %i, is x=%f, y=%f, z=%f. \n" % (rigidIndex, markerIndex, x, y, z)
 * 
 * def rigid_body_point_cloud_marker(int rigidIndex, int markerIndex, bool tracked, float x, float y, float z):             # <<<<<<<<<<<<<<
 *     """ Get corresponding point cloud marker
 *     If tracked is false, there is no corresponding point cloud marker.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_71rigid_body_point_cloud_marker, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rigid_body_point_cloud_marker, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":214
 *         print "There is no corresponding point cloud marker"
 * 
 * def create_rigid_body(str name, int id, int markerCount, markerList):             # <<<<<<<<<<<<<<
 *     """Create a rigid body based on the marker count and marker list provided.
 *     The marker list is expected to contain a list of marker coordinates in the order:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_73create_rigid_body, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_rigid_body, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":225
 *     return TT_CreateRigidBody(name, id, markerCount, markerListp)
 * 
 * def software_build():             # <<<<<<<<<<<<<<
 *     """Software Release Build"""
 *     return TT_BuildNumber()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_75software_build, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_software_build, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":231
 * 
 * #CAMERA GROUP SUPPORT
 * def camera_group_count():             # <<<<<<<<<<<<<<
 *     """Returns number of camera groups"""
 *     return TT_CameraGroupCount()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_77camera_group_count, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_group_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":235
 *     return TT_CameraGroupCount()
 * 
 * def create_camera_group():             # <<<<<<<<<<<<<<
 *     """Add an additional group"""
 *     if TT_CreateCameraGroup():
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_79create_camera_group, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_camera_group, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":242
 *         print "False"
 * 
 * def remove_camera_group(int index):             # <<<<<<<<<<<<<<
 *     """Remove a camera group (must be empty)"""
 *     if TT_RemoveCameraGroup(index):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_81remove_camera_group, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_remove_camera_group, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":249
 *         print "Error, could not remove. Check if group is empty"
 * 
 * def cameras_group(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's camera group index"""
 *     return TT_CamerasGroup(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_83cameras_group, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cameras_group, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":253
 *     return TT_CamerasGroup(index)
 * 
 * def set_group_shutter_delay(int groupIndex, int microseconds):             # <<<<<<<<<<<<<<
 *     """Set camera group's shutter delay"""
 *     TT_SetGroupShutterDelay(groupIndex, microseconds)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_85set_group_shutter_delay, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_group_shutter_delay, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":258
 *     print "Set"
 * 
 * def set_camera_group(int cameraIndex, int cameraGroupIndex):             # <<<<<<<<<<<<<<
 *     """Move camera to camera group"""
 *     TT_SetCameraGroup(cameraIndex, cameraGroupIndex)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_87set_camera_group, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_group, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":264
 * 
 * #MARKER SIZE SETTINGS
 * def set_camera_group_reconstruction(int groupIndex, bool enable):             # <<<<<<<<<<<<<<
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_89set_camera_group_reconstruction, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_group_reconstruction, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":267
 *     return TT_SetCameraGroupReconstruction(groupIndex, enable)
 * 
 * def set_enabled_filterswitch(bool enabled):             # <<<<<<<<<<<<<<
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_91set_enabled_filterswitch, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_enabled_filterswitch, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":270
 *     return TT_SetEnabledFilterSwitch(enabled)
 * 
 * def is_filter_switch_enabled():             # <<<<<<<<<<<<<<
 *     if TT_IsFilterSwitchEnabled():
 *         print "True"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_93is_filter_switch_enabled, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_filter_switch_enabled, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":277
 * 
 * #POINT CLOUD INTERFACE
 * def camera_count():             # <<<<<<<<<<<<<<
 *     """Returns Camera Count"""
 *     return TT_CameraCount()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_95camera_count, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":281
 *     return TT_CameraCount()
 * 
 * def camera_x_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's X Coord"""
 *     return TT_CameraXLocation(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_97camera_x_location, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_x_location, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":285
 *     return TT_CameraXLocation(index)
 * 
 * def camera_y_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Y Coord"""
 *     return TT_CameraYLocation(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_99camera_y_location, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_y_location, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":289
 *     return TT_CameraYLocation(index)
 * 
 * def camera_z_location(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera's Z Coord"""
 *     return TT_CameraZLocation(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_101camera_z_location, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_z_location, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":293
 *     return TT_CameraZLocation(index)
 * 
 * def camera_orientation_matrix(int camera, int index):             # <<<<<<<<<<<<<<
 *     """Orientation"""
 *     return TT_CameraOrientationMatrix(camera, index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_103camera_orientation_matrix, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_orientation_matrix, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":297
 *     return TT_CameraOrientationMatrix(camera, index)
 * 
 * def camera_name(int index):             # <<<<<<<<<<<<<<
 *     """Returns Camera Name"""
 *     print TT_CameraName(index)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_105camera_name, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":301
 *     print TT_CameraName(index)
 * 
 * def camera_marker_count(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """Camera's 2D Marker Count"""
 *     return TT_CameraMarkerCount(cameraIndex)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_107camera_marker_count, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_marker_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":305
 *     return TT_CameraMarkerCount(cameraIndex)
 * 
 * def camera_marker(int cameraIndex, int markerIndex, float x, float y):             # <<<<<<<<<<<<<<
 *     """CameraMarker fetches the 2D centroid location of the marker as seen by the camera"""
 *     if TT_CameraMarker(cameraIndex, markerIndex, x, y):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_109camera_marker, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_marker, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":312
 *         print "Error or no marker"
 * 
 * def camera_pixel_resolution(int cameraIndex, int width, int height):             # <<<<<<<<<<<<<<
 *     if TT_CameraPixelResolution(cameraIndex, width, height):
 *         print "Pixel resolution for camera %i is width=%f, height=%f" %(cameraIndex, width, height)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_111camera_pixel_resolution, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_pixel_resolution, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":318
 *         print "Error"
 * 
 * def set_camera_settings(int camindex, int videotype, int exposure, int threshold, int intensity):             # <<<<<<<<<<<<<<
 *     """Set camera settings.  This function allows you to set the camera's video mode, exposure, threshold,
 *     and illumination settings.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_113set_camera_settings, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_settings, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":327
 *     return TT_SetCameraSettings(camindex, videotype, exposure, threshold, intensity)
 * 
 * def set_camera_frame_rate(int cameraIndex, int frameRate):             # <<<<<<<<<<<<<<
 *     """Set the frame rate for the given zero based camera index.
 *     Returns true if the operation was successful and false otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_115set_camera_frame_rate, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_frame_rate, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":341
 * #available. This usually means that either the camera index is not valid or devices have not been
 * #initialized with TT_Initialize()
 * def camera_frame_rate(int cameraIndex):             # <<<<<<<<<<<<<<
 *     """frames/sec"""
 *     return TT_CameraFrameRate(cameraIndex)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_117camera_frame_rate, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_frame_rate, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":345
 *     return TT_CameraFrameRate(cameraIndex)
 * 
 * def camera_exposure(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraExposure(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_119camera_exposure, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_exposure, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":348
 *     return TT_CameraExposure(cameraIndex)
 * 
 * def camera_threshold(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraThreshold(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_121camera_threshold, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_threshold, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":351
 *     return TT_CameraThreshold(cameraIndex)
 * 
 * def camera_intensity(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraIntensity(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_123camera_intensity, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_intensity, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":354
 *     return TT_CameraIntensity(cameraIndex)
 * 
 * def camera_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return TT_CameraTemperature(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_125camera_temperature, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_temperature, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":357
 *     return TT_CameraTemperature(cameraIndex)
 * 
 * def camera_ring_light_temperature(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraRinglightTemperature(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_127camera_ring_light_temperature, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_ring_light_temperature, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":362
 * 
 * #Camera's Full Frame Grayscale Decimation
 * def camera_grayscale_decimation(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_129camera_grayscale_decimation, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_grayscale_decimation, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":365
 *     return  TT_CameraGrayscaleDecimation(cameraIndex)
 * 
 * def set_camera_grayscale_decimation(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraGrayscaleDecimation(cameraIndex, value):
 *         print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_131set_camera_grayscale_decimation, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_grayscale_decimation, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":373
 * 
 * #Toggle Camera Extended Options
 * def set_camera_filter_switch(int cameraIndex, bool enableIRFilter):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraFilterSwitch(cameraIndex,enableIRFilter):
 *         print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_133set_camera_filter_switch, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_filter_switch, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":379
 *         print "Error. Possibly the camera does not have an IR filter"
 * 
 * def set_camera_agc(int cameraIndex, bool enableAutomaticGainControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAGC(cameraIndex, enableAutomaticGainControl):
 *         print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_135set_camera_agc, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_agc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":385
 *         print "Error. Possibly the camera does not have AGC"
 * 
 * def set_camera_aec(int cameraIndex, bool enableAutomaticExposureControl):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraAEC(cameraIndex, enableAutomaticExposureControl):
 *         print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_137set_camera_aec, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_aec, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":391
 *         print "Error. Possibly the camera does not have AEC"
 * 
 * def set_camera_high_power(int cameraIndex, bool enableHighPowerMode):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraHighPower(cameraIndex, enableHighPowerMode):
 *         print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_139set_camera_high_power, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_high_power, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":397
 *         print "Error. Possibly the camera does not have HighPowerMode"
 * 
 * def set_camera_mjpeg_high_quality(int cameraIndex, int mjpegQuality):             # <<<<<<<<<<<<<<
 *     if TT_SetCameraMJPEGHighQuality(cameraIndex, mjpegQuality):
 *         print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_141set_camera_mjpeg_high_quality, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_mjpeg_high_quality, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":405
 * 
 * #Camera Imager Gain
 * def camera_imager_gain(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_143camera_imager_gain, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_imager_gain, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":408
 *     return  TT_CameraImagerGain(cameraIndex)
 * 
 * def camera_imager_gain_levels(int cameraIndex):             # <<<<<<<<<<<<<<
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_145camera_imager_gain_levels, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_imager_gain_levels, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":411
 *     return  TT_CameraImagerGainLevels(cameraIndex)
 * 
 * def set_camera_imager_gain(int cameraIndex, int value):             # <<<<<<<<<<<<<<
 *     TT_SetCameraImagerGain(cameraIndex, value)
 *     print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_147set_camera_imager_gain, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_imager_gain, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":417
 * 
 * #Camera Illumination
 * def is_continuous_ir_available(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_IsContinuousIRAvailable(cameraIndex):
 *         print "Yes"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_149is_continuous_ir_available, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_continuous_ir_available, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":423
 *         print "No"
 * 
 * def continuous_ir(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ContinuousIR(cameraIndex):
 *         print "On"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_151continuous_ir, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_continuous_ir, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":429
 *         print "Off"
 * 
 * def set_continous_ir(int cameraIndex, bool enable):             # <<<<<<<<<<<<<<
 *     TT_SetContinuousIR(cameraIndex, enable)
 *     print "Set"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_153set_continous_ir, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_continous_ir, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":439
 * 
 * #Camera Masking
 * def camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_155camera_mask, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_mask, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":447
 *         print "Mask does not exist"
 * 
 * def set_camera_mask(int cameraIndex, buffername, int bufferSize):             # <<<<<<<<<<<<<<
 *     assert type (buffername) is str, "Argument should be buffername, i.e. a string literal"
 *     cdef unsigned char * buffer=buffername
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_157set_camera_mask, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_camera_mask, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":455
 *         print "Error. Not set"
 * 
 * def clear_camera_mask(int cameraIndex):             # <<<<<<<<<<<<<<
 *     if TT_ClearCameraMask(cameraIndex):
 *         print "Cleared"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_159clear_camera_mask, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clear_camera_mask, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":461
 *         print "Not cleared"
 * 
 * def camera_mask_info(int cameraIndex, int blockingMaskWidth, int blockingMaskHeight, int blockingMaskGrid):             # <<<<<<<<<<<<<<
 *     if TT_CameraMaskInfo(cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid):
 *         print "Camera %i blocking masks width:%f, height:%f, grid:%f" % (cameraIndex, blockingMaskWidth, blockingMaskHeight, blockingMaskGrid)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6native_161camera_mask_info, NULL, __pyx_n_s_native); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_camera_mask_info, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "native.pyx":1
 * __author__ = 'Vash'             # <<<<<<<<<<<<<<
 * 
 * # means comment from official SDK API (or Cython page) ## means comment from me
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init native", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init native");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
